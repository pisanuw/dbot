Quote	Notes
I do not fear computers. I fear lack of them.   -- Isaac Asimov	http://www.devtopics.com/101-more-great-computer-quotes/
A computer once beat me at chess, but it was no match for me at kick boxing.   -- Emo Philips	http://www.devtopics.com/101-more-great-computer-quotes/
Computer Science is no more about computers than astronomy is about telescopes.   -- Edsger W. Dijkstra	http://www.devtopics.com/101-more-great-computer-quotes/
The computer was born to solve problems that did not exist before.   -- Bill Gates	http://www.devtopics.com/101-more-great-computer-quotes/
Software is like entropy: It is difficult to grasp, weighs nothing, and obeys the Second Law of Thermodynamics; i.e., it always increases.   -- Norman Augustine	http://www.devtopics.com/101-more-great-computer-quotes/
Software is a gas; it expands to fill its container.   -- Nathan Myhrvold	http://www.devtopics.com/101-more-great-computer-quotes/
All parts should go together without forcing.  You must remember that the parts you are reassembling were disassembled by you.  Therefore, if you can’t get them together again, there must be a reason.  By all means, do not use a hammer.   -- IBM Manual, 1925	http://www.devtopics.com/101-more-great-computer-quotes/
Standards are always out of date.  That’s what makes them standards.   -- Alan Bennett	http://www.devtopics.com/101-more-great-computer-quotes/
Physics is the universe’s operating system.   -- Steven R Garman	http://www.devtopics.com/101-more-great-computer-quotes/
It’s hardware that makes a machine fast.  It’s software that makes a fast machine slow.   -- Craig Bruce	http://www.devtopics.com/101-more-great-computer-quotes/
Imagination is more important than knowledge.  For knowledge is limited, whereas imagination embraces the entire world, stimulating progress, giving birth to evolution.   -- Albert Einstein	http://www.devtopics.com/101-more-great-computer-quotes/
The greatest enemy of knowledge is not ignorance, it is the illusion of knowledge.   -- Stephen Hawking	http://www.devtopics.com/101-more-great-computer-quotes/
The more you know, the more you realize you know nothing.   -- Socrates	http://www.devtopics.com/101-more-great-computer-quotes/
Tell me and I forget.  Teach me and I remember.  Involve me and I learn.   -- Benjamin Franklin	http://www.devtopics.com/101-more-great-computer-quotes/
Real knowledge is to know the extent of one’s ignorance.   -- Confucius	http://www.devtopics.com/101-more-great-computer-quotes/
If people never did silly things, nothing intelligent would ever get done.   -- Ludwig Wittgenstein	http://www.devtopics.com/101-more-great-computer-quotes/
Getting information off the Internet is like taking a drink from a fire hydrant.   -- Mitchell Kapor	http://www.devtopics.com/101-more-great-computer-quotes/
If you think your users are idiots, only idiots will use it.   -- Linus Torvalds	http://www.devtopics.com/101-more-great-computer-quotes/
From a programmer’s point of view, the user is a peripheral that types when you issue a read request.   -- P. Williams	http://www.devtopics.com/101-more-great-computer-quotes/
Where is the ‘any’ key?   -- Homer Simpson, in response to the message, Press any key	http://www.devtopics.com/101-more-great-computer-quotes/
Computers are good at following instructions, but not at reading your mind.   -- Donald Knuth	http://www.devtopics.com/101-more-great-computer-quotes/
There is only one problem with common sense; it’s not very common.   -- Milt Bryce	http://www.devtopics.com/101-more-great-computer-quotes/
Your most unhappy customers are your greatest source of learning.   -- Bill Gates	http://www.devtopics.com/101-more-great-computer-quotes/
Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.   -- Donald E. Knuth	http://www.devtopics.com/101-more-great-computer-quotes/
The Internet?  We are not interested in it.   -- Bill Gates, 1993	http://www.devtopics.com/101-more-great-computer-quotes/
The best way to get accurate information on Usenet is to post something wrong and wait for corrections.   -- Matthew Austern	http://www.devtopics.com/101-more-great-computer-quotes/
The most likely way for the world to be destroyed, most experts agree, is by accident.  That’s where we come in; we’re computer professionals.  We cause accidents.   -- Nathaniel Borenstein	http://www.devtopics.com/101-more-great-computer-quotes/
Pessimists, we’re told, look at a glass containing 50% air and 50% water and see it as half empty.  Optimists, in contrast, see it as half full.  Engineers, of course, understand the glass is twice as big as it needs to be.   -- Bob Lewis	http://www.devtopics.com/101-more-great-computer-quotes/
In a room full of top software designers, if two agree on the same thing, that’s a majority.   -- Bill Curtis	http://www.devtopics.com/101-more-great-computer-quotes/
It should be noted that no ethically-trained software engineer would ever consent to write a DestroyBaghdad procedure.  Basic professional ethics would instead require him to write a DestroyCity procedure, to which Baghdad could be given as a parameter.   -- Nathaniel S. Borenstein	http://www.devtopics.com/101-more-great-computer-quotes/
Mostly, when you see programmers, they aren’t doing anything.  One of the attractive things about programmers is that you cannot tell whether or not they are working simply by looking at them.  Very often they’re sitting there seemingly drinking coffee and gossiping, or just staring into space.  What the programmer is trying to do is get a handle on all the individual and unrelated ideas that are scampering around in his head.   -- Charles M. Strauss	http://www.devtopics.com/101-more-great-computer-quotes/
If you think you are worth what you know, you are very wrong.  Your knowledge today does not have much value beyond a couple of years.  Your value is what you can learn and how easily you can adapt to the changes this profession brings so often.   -- Jose M. Aguilar	http://www.devtopics.com/101-more-great-computer-quotes/
Programs must be written for people to read, and only incidentally for machines to execute.   -- Abelson and Sussman	http://www.devtopics.com/101-more-great-computer-quotes/
Commenting your code is like cleaning your bathroom -- you never want to do it, but it really does create a more pleasant experience for you and your guests.   -- Ryan Campbell	http://www.devtopics.com/101-more-great-computer-quotes/
We have to stop optimizing for programmers and start optimizing for users.   -- Jeff Atwood	http://www.devtopics.com/101-more-great-computer-quotes/
Low-level programming is good for the programmer’s soul.   -- John Carmack	http://www.devtopics.com/101-more-great-computer-quotes/
It’s OK to figure out murder mysteries, but you shouldn’t need to figure out code.  You should be able to read it.   -- Steve McConnell	http://www.devtopics.com/101-more-great-computer-quotes/
If we wish to count lines of code, we should not regard them as ‘lines produced’ but as ‘lines spent.'   -- Edsger Dijkstra	http://www.devtopics.com/101-more-great-computer-quotes/
Programming can be fun, so can cryptography; however they should not be combined.   -- Kreitzberg and Shneiderman	http://www.devtopics.com/101-more-great-computer-quotes/
Before software should be reusable, it should be usable.   -- Ralph Johnson	http://www.devtopics.com/101-more-great-computer-quotes/
If you automate a mess, you get an automated mess.   -- Rod Michael	http://www.devtopics.com/101-more-great-computer-quotes/
Looking at code you wrote more than two weeks ago is like looking at code you are seeing for the first time.   -- Dan Hurvitz	http://www.devtopics.com/101-more-great-computer-quotes/
It is easier to change the specification to fit the program than vice versa.   -- Alan Perlis	http://www.devtopics.com/101-more-great-computer-quotes/
Less than 10% of the code has to do with the ostensible purpose of the system; the rest deals with input-output, data validation, data structure maintenance, and other housekeeping.   -- Mary Shaw	http://www.devtopics.com/101-more-great-computer-quotes/
If you have a procedure with ten parameters, you probably missed some.   -- Alan Perlis	http://www.devtopics.com/101-more-great-computer-quotes/
How rare it is that maintaining someone else’s code is akin to entering a beautifully designed building, which you admire as you walk around and plan how to add a wing or do some redecorating. More often, maintaining someone else’s code is like being thrown headlong into a big pile of slimy, smelly garbage.   -- Bill Venners	http://www.devtopics.com/101-more-great-computer-quotes/
Code generation, like drinking alcohol, is good in moderation.   -- Alex Lowe	http://www.devtopics.com/101-more-great-computer-quotes/
Simplicity, carried to the extreme, becomes elegance.   -- Jon Franklin	http://www.devtopics.com/101-more-great-computer-quotes/
A program is never less than 90% complete, and never more than 95% complete.   -- Terry Baker	http://www.devtopics.com/101-more-great-computer-quotes/
When you are stuck in a traffic jam with a Porsche, all you do is burn more gas in idle.  Scalability is about building wider roads, not about building faster cars.   -- Steve Swartz	http://www.devtopics.com/101-more-great-computer-quotes/
Everyone by now presumably knows about the danger of premature optimization.  I think we should be just as worried about premature design -- designing too early what a program should do.   -- Paul Graham	http://www.devtopics.com/101-more-great-computer-quotes/
Programming without an overall architecture or design in mind is like exploring a cave with only a flashlight: You don’t know where you’ve been, you don’t know where you’re going, and you don’t know quite where you are.   -- Danny Thorpe	http://www.devtopics.com/101-more-great-computer-quotes/
The best way to predict the future is to implement it.   -- David Heinemeier Hansson	http://www.devtopics.com/101-more-great-computer-quotes/
We need above all to know about changes; no one wants or needs to be reminded 16 hours a day that his shoes are on.   -- David Hubel	http://www.devtopics.com/101-more-great-computer-quotes/
On two occasions I have been asked, ‘If you put into the machine wrong figures, will the right answers come out?’  I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question.   -- Charles Babbage	http://www.devtopics.com/101-more-great-computer-quotes/
Make everything as simple as possible, but not simpler.   -- Albert Einstein	http://www.devtopics.com/101-more-great-computer-quotes/
Today, most software exists, not to solve a problem, but to interface with other software.   -- IO Angell	http://www.devtopics.com/101-more-great-computer-quotes/
Good specifications will always improve programmer productivity far better than any programming tool or technique.   -- Milt Bryce	http://www.devtopics.com/101-more-great-computer-quotes/
The difference between theory and practice is that in theory, there is no difference between theory and practice.   -- Richard Moore	http://www.devtopics.com/101-more-great-computer-quotes/
Don’t document the problem, fix it.   -- Atli Björgvin Oddsson	http://www.devtopics.com/101-more-great-computer-quotes/
As a rule, software systems do not work well until they have been used, and have failed repeatedly, in real applications.   -- Dave Parnas	http://www.devtopics.com/101-more-great-computer-quotes/
If the code and the comments do not match, possibly both are incorrect.   -- Norm Schryer	http://www.devtopics.com/101-more-great-computer-quotes/
I think it’s a new feature.  Don’t tell anyone it was an accident.   -- Larry Wall	http://www.devtopics.com/101-more-great-computer-quotes/
If you don’t handle [exceptions], we shut your application down.  That dramatically increases the reliability of the system.   -- Anders Hejlsberg	http://www.devtopics.com/101-more-great-computer-quotes/
When debugging, novices insert corrective code; experts remove defective code.   -- Richard Pattis	http://www.devtopics.com/101-more-great-computer-quotes/
In a software project team of 10, there are probably 3 people who produce enough defects to make them net negative producers.   -- Gordon Schulmeyer	http://www.devtopics.com/101-more-great-computer-quotes/
I think it is inevitable that people program poorly.  Training will not substantially help matters.  We have to learn to live with it.   -- Alan Perlis	http://www.devtopics.com/101-more-great-computer-quotes/
Program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.   -- Edsger Dijkstra	http://www.devtopics.com/101-more-great-computer-quotes/
Manually managing blocks of memory in C is like juggling bars of soap in a prison shower: It’s all fun and games until you forget about one of them.   -- anonymous Usenet user	http://www.devtopics.com/101-more-great-computer-quotes/
There’s no obfuscated Perl contest because it’s pointless.   -- Jeff Polk	http://www.devtopics.com/101-more-great-computer-quotes/
Java is the most distressing thing to hit computing since MS-DOS.   -- Alan Kay	http://www.devtopics.com/101-more-great-computer-quotes/
There are only two things wrong with C++:  The initial concept and the implementation.   -- Bertrand Meyer	http://www.devtopics.com/101-more-great-computer-quotes/
It was a joke, okay?  If we thought it would actually be used, we wouldn’t have written it!   -- Mark Andreesen, speaking of the HTML tag BLINK	http://www.devtopics.com/101-more-great-computer-quotes/
Web Services are like teenage sex.  Everyone is talking about doing it, and those who are actually doing it are doing it badly.   -- Michelle Bustamante	http://www.devtopics.com/101-more-great-computer-quotes/
Perl: The only language that looks the same before and after RSA encryption.   -- Keith Bostic	http://www.devtopics.com/101-more-great-computer-quotes/
I didn’t work hard to make Ruby perfect for everyone, because you feel differently from me.  No language can be perfect for everyone.  I tried to make Ruby perfect for me, but maybe it’s not perfect for you.  The perfect language for Guido van Rossum is probably Python.   -- Yukihiro Matsumoto, aka Matz, creator of Ruby	http://www.devtopics.com/101-more-great-computer-quotes/
XML is not a language in the sense of a programming language any more than sketches on a napkin are a language.   -- Charles Simonyi	http://www.devtopics.com/101-more-great-computer-quotes/
BASIC is to computer programming as QWERTY is to typing.   -- Seymour Papert	http://www.devtopics.com/101-more-great-computer-quotes/
It has been discovered that C++ provides a remarkable facility for concealing the trivial details of a program -- such as where its bugs are.   -- David Keppel	http://www.devtopics.com/101-more-great-computer-quotes/
UNIX is simple.  It just takes a genius to understand its simplicity.   -- Dennis Ritchie	http://www.devtopics.com/101-more-great-computer-quotes/
Some people, when confronted with a problem, think ‘I know, I’ll use regular expressions.’  Now they have two problems.   -- Jamie Zawinski	http://www.devtopics.com/101-more-great-computer-quotes/
I think computer viruses should count as life.  I think it says something about human nature that the only form of life we have created so far is purely destructive.  We’ve created life in our own image.   -- Stephen Hawking	http://www.devtopics.com/101-more-great-computer-quotes/
The only truly secure system is one that is powered off, cast in a block of concrete and sealed in a lead-lined room with armed guards.   -- Gene Spafford	http://www.devtopics.com/101-more-great-computer-quotes/
Being able to break security doesn’t make you a hacker anymore than being able to hotwire cars makes you an automotive engineer.   -- Eric Raymond	http://www.devtopics.com/101-more-great-computer-quotes/
Companies spend millions of dollars on firewalls, encryption and secure access devices, and it’s money wasted, because none of these measures address the weakest link in the security chain.   -- Kevin Mitnick	http://www.devtopics.com/101-more-great-computer-quotes/
If you think technology can solve your security problems, then you don’t understand the problems and you don’t understand the technology.   -- Bruce Schneier	http://www.devtopics.com/101-more-great-computer-quotes/
Hoaxes use weaknesses in human behavior to ensure they are replicated and distributed.  In other words, hoaxes prey on the Human Operating System.   -- Stewart Kirkpatrick	http://www.devtopics.com/101-more-great-computer-quotes/
Passwords are like underwear: you don’t let people see it, you should change it very often, and you shouldn’t share it with strangers.   -- Chris Pirillo	http://www.devtopics.com/101-more-great-computer-quotes/
I am not out to destroy Microsoft, that would be a completely unintended side effect.   -- Linus Torvalds	http://www.devtopics.com/101-more-great-computer-quotes/
Yes, we have a dress code. You have to dress.   -- Scott McNealy, co-founder of Sun Microsystems	http://www.devtopics.com/101-more-great-computer-quotes/
In an information economy, the most valuable company assets drive themselves home every night.  If they are not treated well, they do not return the next morning.   -- Peter Chang	http://www.devtopics.com/101-more-great-computer-quotes/
It’s better to wait for a productive programmer to become available than it is to wait for the first available programmer to become productive.   -- Steve McConnell	http://www.devtopics.com/101-more-great-computer-quotes/
I’m not one of those who think Bill Gates is the devil.  I simply suspect that if Microsoft ever met up with the devil, it wouldn’t need an interpreter.   -- Nicholas Petreley	http://www.devtopics.com/101-more-great-computer-quotes/
Two years from now, spam will be solved.   -- Bill Gates, 2004	http://www.devtopics.com/101-more-great-computer-quotes/
The problem of viruses is temporary and will be solved in two years.   -- John McAfee, 1988	http://www.devtopics.com/101-more-great-computer-quotes/
Computer viruses are an urban legend.   -- Peter Norton, 1988	http://www.devtopics.com/101-more-great-computer-quotes/
In 2031, lawyers will be commonly a part of most development teams.   -- Grady Booch	http://www.devtopics.com/101-more-great-computer-quotes/
I don’t know what the language of the year 2000 will look like, but I know it will be called Fortran.   -- CA Hoare, 1982	http://www.devtopics.com/101-more-great-computer-quotes/
In the future, computers may weigh no more than 1.5 tonnes.   -- Popular mechanics, 1949	http://www.devtopics.com/101-more-great-computer-quotes/
I see little commercial potential for the Internet for at least ten years.   -- Bill Gates, 1994	http://www.devtopics.com/101-more-great-computer-quotes/
Before man reaches the moon, mail will be delivered within hours from New York to California, to Britain, to India or Australia.   -- Arthur Summerfield, 1959, United States Post	http://www.devtopics.com/101-more-great-computer-quotes/
...artificial intelligence will become a major human rights issue in the twenty-first century.   -- Safiya Umoja Noble, Algorithms of Oppression: How Search Engines Reinforce Racism	https://www.goodreads.com/quotes/tag/computer-science
...if you aren't, at any given time, scandalized by code you wrote five or even three years ago, you're not learning anywhere near enough   -- Nick Black	https://www.goodreads.com/quotes/tag/computer-science
[The study of prime numbers] becoming pivotal in cryptography and online security. As it happens, it is much easier to multiply primes together than to factor them back out. In modern encryption, secret primes known only to the sender and recipient get multiplied together to create huge composite numbers that can be transmitted publicly without fear, since factoring the product would take eavesdropper way too long to be worth attempting.   -- Brian Christian, Tom Griffiths	https://www.goodreads.com/quotes/tag/computer-science
A code, which according to Turing's schema is supposed to make one machine behave as if it were another specific machine (which is supposed to make the former imitate the latter) must do the following things. It must contain, in terms that the machine will understand (and purposively obey), instructions (further detailed parts of the code) that will cause the machine to examine every order it gets and determine whether this order has the structure appropriate to an order of the second machine. It must then contain, in terms of the order system of the first machine, sufficient orders to make the machine cause the actions to be taken that the second machine would have taken under the influence of the order in question.   -- John von Neumann, The Computer and the Brain	https://www.goodreads.com/quotes/tag/computer-science
A few years ago a friend said that I use to hunt and fish and build houses and things but now my whole life revolved around my computer I replied "But my computer revolves around the world   -- Stanley Victor Paskavich, Return to Stantasyland	https://www.goodreads.com/quotes/tag/computer-science
A good standalone plugin can also make you a fair amount of money. Many developers make a decent living by simply maintaining and updating one or two crucial plugins that are far better than anything available for free.   -- Robert Duchnik, jQuery Plugin Development In 30 Minutes	https://www.goodreads.com/quotes/tag/computer-science
A healthy child given enough training time can get fairly good not only at any game, but also at any language, sport or vocation. Comparing the intelligence of humans and machines today, we humans win hands-down on breadth, while machines outperform us in a small but growing number of narrow domains, as illustrated in figure 2.1. The holy grail AI research is to build general AI (better known as artificial general intelligence, AGI) that is maximally broad: able to accomplish virtually any goal, including learning.   -- Max Tegmark, Life 3.0: Being Human in the Age of Artificial Intelligence	https://www.goodreads.com/quotes/tag/computer-science
A system of logical instructions that an automaton can carry out and which causes the automaton to perform some organized task is called a code.   -- John von Neumann, The Computer and the Brain	https://www.goodreads.com/quotes/tag/computer-science
AI can be programed to imitate human behavior only, but it can't be programmed to feel the emotions that make the humans behave the way they do.   -- Abhijit Naskar, Mission Reality	https://www.goodreads.com/quotes/tag/computer-science
AI research can have irreversible repercussions in the life of the human species, so we must tread cautiously.   -- Abhijit Naskar, Mission Reality	https://www.goodreads.com/quotes/tag/computer-science
All existing machines and memories use "direct addressing," which is to say that every word in the memory has a numerical address of its own that characterizes it and its position within the memory (the total aggregate of all hierarchic levels) uniquely.   -- John von Neumann, The Computer and the Brain	https://www.goodreads.com/quotes/tag/computer-science
Although greed is considered one of the seven deadly sins, it turns out that greedy algorithms often perform quite well.   -- Stuart Russell, Artificial Intelligence: A Modern Approach	https://www.goodreads.com/quotes/tag/computer-science
An activity originally intended to be performed by low-status, clerical – and more often than not, female – computer programming was gradually and deliberately transformed into a high-status, scientific, and masculine discipline.   -- Nathan L. Ensmenger	https://www.goodreads.com/quotes/tag/computer-science
An algorithm must be seen to be believed.   -- Donald Knuth, Leaders in Computing: Changing the digital world	https://www.goodreads.com/quotes/tag/computer-science
An international power supply is the device which means it doesn't matter what country you're in, or even if you know what country you're in (more of a problem than you might suspect) - you just plug your Mac in and it figures it out for itself. We call this principle Plug and Play. Or at least, Microsoft calls it that because it hasn't got it yet. In the Mac world we've had it for so long we didn't even think of giving it a name.   -- Douglas Adams, The Salmon of Doubt	https://www.goodreads.com/quotes/tag/computer-science
And they came to be included in a culture and community that placed the computer science engineer at the highest level of social status.   -- Alec J. Ross, The Industries of the Future	https://www.goodreads.com/quotes/tag/computer-science
Any artificial automaton that has been constructed for human use, and specifically for the control of complicated processes, normally possesses a purely logical part and an arithmetical part, i.e. a part in which arithmetical processes play no role, and one in which they are of importance.   -- John von Neumann, The Computer and the Brain	https://www.goodreads.com/quotes/tag/computer-science
Artificial intelligence is nowhere near attaining actual sentience or awareness. And without awareness it’s simply a mechanical device, which may pretend to show emotions and sentience, if it is programmed to do so, and thus it may be able to fool the humans as being alive, but in its own internal circuitry, it’d simply be following its preprogrammed tasks through the flowchart of an algorithm.   -- Abhijit Naskar	https://www.goodreads.com/quotes/tag/computer-science
Artificial intelligence will not destroy this planet, irresponsible human intelligence will.   -- Abhijit Naskar	https://www.goodreads.com/quotes/tag/computer-science
Automation vs. human labor is a false dichotomy   -- Siddharth Suri, Ghost Work: How to Stop Silicon Valley from Building a New Global Underclass	https://www.goodreads.com/quotes/tag/computer-science
believe the power of jQuery is highly underutilized. Most developers will take advantage of its shortcuts and CSS selectors, but most of the time they fail to take advantage of much else. Being able to extend jQuery, whether by adding your own functions, CSS selectors or full-blown plugins, makes you a much stronger and smarter developer.   -- Robert Duchnik, jQuery Plugin Development In 30 Minutes	https://www.goodreads.com/quotes/tag/computer-science
Bombe atomique hier, bombe informatique aujourd'hui et, demain, bombe génétique?   -- Paul Virilio	https://www.goodreads.com/quotes/tag/computer-science
C is quirky, flawed, and an enormous success.   -- Dennis M. Ritchie	https://www.goodreads.com/quotes/tag/computer-science
Ciência da Computação tem tanto a ver com o computador como a astronomia com o telescópio, a biologia com o microscópio, ou a química com os tubos de ensaio. A ciência não estuda ferramentas, mas o que fazemos e o que descobrimos com elas.   -- Edsger Dijkstra	https://www.goodreads.com/quotes/tag/computer-science
Code is not like other how-computers-work books. It doesn't have big color illustrations of disk drives with arrows showing how the data sweeps into the computer. Code has no drawings of trains carrying a cargo of zeros and ones. Metaphors and similes are wonderful literary devices but they do nothing but obscure the beauty of technology.   -- Charles Petzold, Code: The Hidden Language of Computer Hardware and Software	https://www.goodreads.com/quotes/tag/computer-science
Coding is not just code, that is a live thing to serve everyone!   -- Ming Song	https://www.goodreads.com/quotes/tag/computer-science
Computation is not the same as thought and emulation is not the same as imagination.   -- Abhijit Naskar, Mission Reality	https://www.goodreads.com/quotes/tag/computer-science
Computer science increasingly relies on its private corporate patrons who apply their own closed systems of peer review and criticism, with occasional results thrown over the wall. The closed walls of Redmond or Mountain View enable old-fashioned patronage of nature's secrets. The objectivity and scientific status of computer science is a chimera: we cannot stand on the shoulders of giants in computer science, for they simply refuse to let us.   -- Samir Chopra, Decoding Liberation: The Promise of Free and Open Source Software	https://www.goodreads.com/quotes/tag/computer-science
Computer science only indicates the retrospective omnipotence of our technologies. In other words, an infinite capacity to process data (but only data - i.e. the already given) and in no sense a new vision. With that science, we are entering an era of exhaustivity, which is also an era of exhaustion. Of generalized interactivity abolishing particularized action. Of the interface which abolishes challenge, passion, and rivalry between peoples, ideas and individuals which was always the source of the finest energies.	https://www.goodreads.com/quotes/tag/computer-science
Computers and mobile devices are becoming known for their inherent insecurities and the ability to damage the long term health of the users.   -- Steven Magee	https://www.goodreads.com/quotes/tag/computer-science
Discoveries can come in many different ways, and the most important thing is to be ready for them.   -- Neil C. Jones, An Introduction to Bioinformatics Algorithms	https://www.goodreads.com/quotes/tag/computer-science
El desarrollo de software comparte con el deporte profesional la característica de lograr que los treintañeros se sientan decrépitos   -- Neal Stephenson, Snow Crash	https://www.goodreads.com/quotes/tag/computer-science
El hecho es que el ordenador está aquí para quedarse y los niños saben utilizarlo y nosotros no. Incluso el lenguaje.   -- Tom Sharpe, Wilt On High	https://www.goodreads.com/quotes/tag/computer-science
End-to-End encryption is practically a meaningless phrase used by internet-based companies to coax people into believing the modern myth of online privacy.   -- Abhijit Naskar	https://www.goodreads.com/quotes/tag/computer-science
Every machine has artificial intelligence. And the more advanced a machine gets, the more advanced artificial intelligence gets as well. But, a machine cannot feel what it is doing. It only follows instructions - our instructions - instructions of the humans. So, artificial intelligence will not destroy the world. Our irresponsibility will destroy the world.   -- Abhijit Naskar	https://www.goodreads.com/quotes/tag/computer-science
Evolution optimizes strongly for energy efficiency because of limited food supply, not for ease of construction or understanding by human engineers.   -- Max Tegmark	https://www.goodreads.com/quotes/tag/computer-science
For many purposes, we need to understand the world as having things in it that are related to each other, not just variables with values. For example, we might notice that a large truck ahead of us is reversing into the driveway of a dairy farm but a cow has got loose and is blocking the truck’s path. A factored representation is unlikely to be pre-equipped with the attribute TruckAheadBackingIntoDairyFarmDrivewayBlockedByLooseCow with value true or false   -- Stuart Russell, Artificial Intelligence: A Modern Approach	https://www.goodreads.com/quotes/tag/computer-science
Functions that create values are easier to combine in new ways than functions that directly perform side effects   -- Marijn Haverbeke	https://www.goodreads.com/quotes/tag/computer-science
Generating a system architecture is not a deterministic process. It requires careful consideration of business requirements, technology choices, existing infrastructure and systems, and actual physical resources, such as budget and manpower.   -- Andrew Holdsworth, Oracle9i Database Performance Planning	https://www.goodreads.com/quotes/tag/computer-science
I don't know how many of you have ever met Dijkstra, but you probably know that arrogance in computer science is measured in nano-Dijkstras.   -- Alan Kay	https://www.goodreads.com/quotes/tag/computer-science
I got more interested in the calculator than I did in the problem.   -- Fernando Corbató	https://www.goodreads.com/quotes/tag/computer-science
I heard reiteration of the following claim: Complex theories do not work; simple algorithms do.	https://www.goodreads.com/quotes/tag/computer-science
I heard reiteration of the following claim: Complex theories do not work; simple algorithms do.	https://www.goodreads.com/quotes/tag/computer-science
I hope the ﬁeld of computer science never loses its sense of fun. ... What you know about computing other people will learn. Don’t feel as if the key to successful computing is only in your hands. What’s in your hands I think and hope is intelligence: the ability to see the machine as more than when you were ﬁrst led up to it, that you can make it more.   -- Alan J. Perlis, Structure and Interpretation of Computer Programs	https://www.goodreads.com/quotes/tag/computer-science
I think that it’s extraordinarily important that we in computer science keep fun in computing. When it started out it was an awful lot of fun. Of course the paying customers got shafted every now and then and after a while we began to take their complaints seriously. We began to feel as if we really were responsible for the successful error-free perfect use of these machines. I don’t think we are. I think we’re responsible for stretching them setting them off in new directions and keeping fun in the house. I hope the ﬁeld of computer science never loses its sense of fun. Above all I hope we don’t become missionaries. Don’t feel as if you’re Bible sales-men. The world has too many of those already. What you know about computing other people will learn. Don’t feel as if the key to successful computing is only in your hands. What’s in your hands I think and hope is intelligence: the ability to see the machine as more than when you were ﬁrst led up	https://www.goodreads.com/quotes/tag/computer-science
I was transformed...because I caught a glimpse of a revolutionary use for computers. We seized the opportunity to the computer as a general processor for symbols (hence thoughts) rather than just a speedy engine for arithmetic.   -- Herbert A. Simon, Models of My Life	https://www.goodreads.com/quotes/tag/computer-science
I wish to add my mite towards expounding & interpreting the Almighty, & his laws & works, for the most effective use of mankind; and certainly, I should feel it no small glory if I were enabled to be one of his most noted prophets (using this word in my own peculiar sense) in this world.   -- Ada Lovelace, Ada, the Enchantress of Numbers: A Selection from the Letters of Lord Byron's Daughter and Her Description of the First Computer	https://www.goodreads.com/quotes/tag/computer-science
I would like to demonstrate that in the area of science a good old principle is valid:	https://www.goodreads.com/quotes/tag/computer-science
I’m glad someone’s finally giving ed the attention it deserves.   --  Ken Thompson	https://www.goodreads.com/quotes/tag/computer-science
Ich langte in meine Tasche nach einem Milky Way - was sonst für einen Astronomen - und machte es mir bequem, um den Hacker auf meinem grünen Monitor zu beobachten.   -- Clifford Stoll, The Cuckoo's Egg: Tracking a Spy Through the Maze of Computer Espionage	https://www.goodreads.com/quotes/tag/computer-science
If a machine ever gains awareness, it will be not due to our careful programming, but due to an unforeseeable anomaly.   -- Abhijit Naskar, The Gospel of Technology	https://www.goodreads.com/quotes/tag/computer-science
If the brain had a native language we would be able to communicate with all humans without translation. Or even all other creatures on earth.   -- Ghassan Labban	https://www.goodreads.com/quotes/tag/computer-science
If you are too lazy to cleanup your database after testing, your filesystem after testing or your memory based system consider moving to a different profession. This isn't a job for you.   -- Roy Osherove, The Art of Unit Testing: With Examples in .NET	https://www.goodreads.com/quotes/tag/computer-science
Il fattore umano è l'anello più debole della sicurezza   -- Kevin D. Mitnick, The Art of Deception: Controlling the Human Element of Security	https://www.goodreads.com/quotes/tag/computer-science
In my experience, requirements change quite often, or new situations will arise that weren’t anticipated at the start of the project. If the situation can be addressed with a plugin, I just whip open the standalone plugin page, make the updates and pop the new plugin back in. Because the plugin is self-contained, it’s easy to recreate the problem, fix it, and get it back into the codebase.   -- Robert Duchnik, jQuery Plugin Development In 30 Minutes	https://www.goodreads.com/quotes/tag/computer-science
In search," Urs (Hölzle) believed, "the discussion was really, How can we outdistance our current system and make it look laughable? That's the best definition of success: if a new system comes out and everyone says, 'Wow, I can't believe we put up with that old thing because it was so primitive and limited compared to this.   -- Douglas Edwards, I'm Feeling Lucky: The Confessions of Google Employee Number 59	https://www.goodreads.com/quotes/tag/computer-science
In the end, it all comes down to 0 and 1   -- Vineet Goel	https://www.goodreads.com/quotes/tag/computer-science
In the history of ideas, it's repeatedly happened that an idea, developed in one area for one purpose, finds an unexpected application elsewhere. Concepts developed purely for philosophy of mathematics turned out to be just what you needed to build a computer. Statistical formulae for understanding genetic change in biology are now applied in both economics and in programming.   -- Patrick Grim	https://www.goodreads.com/quotes/tag/computer-science
In the U.S. there are two types of hipsters: those who know how to program and those who serve coffee.   -- César Hidalgo	https://www.goodreads.com/quotes/tag/computer-science
Index design is also a largely iterative process, based on the SQL generated by application designers. However, it is possible to make a sensible start by building indexes that enforce primary key constraints and indexes on known access patterns, such as a person's name. As the application evolves and testing is performed on realistic sizes of data, certain queries will need performance improvements for which building a better index is a good solution.   -- Andrew Holdsworth, Oracle9i Database Performance Planning	https://www.goodreads.com/quotes/tag/computer-science
Is it possible that software is not like anything else, that it is meant to be discarded: that the whole point is to always see it as a soap bubble?   -- Alan J Perlis	https://www.goodreads.com/quotes/tag/computer-science
It can be argued that the computer is humanity’s attempt to replicate the human brain. This is perhaps an unattainable goal. However, unattainable goals often lead to outstanding accomplishment.   -- Ammaar Shaukat Reshi	https://www.goodreads.com/quotes/tag/computer-science
It can be argued that the computer is humanity’s attempt to replicate the human brain. This is perhaps an unattainable goal. However, unattainable goals often lead to outstanding accomplishment.   -- Zubair Saleem Fazal	https://www.goodreads.com/quotes/tag/computer-science
It is difficult to find a remedy for our own sadness, because we are ourselves implicated in it. It is difficult to find a remedy for other people's sadness because we are prisoners of it.   -- Jean Baudrillard, Cool Memories	https://www.goodreads.com/quotes/tag/computer-science
It is possible to invent a single machine which can be used to compute any computable sequence.   -- Alan Turing	https://www.goodreads.com/quotes/tag/computer-science
jQuery is by far the most widely used library for JavaScript. It is used on more than 50% of websites. Many frameworks, such as Backbone and Twitter’s Bootstrap, are built on top of jQuery. Being able to extend and write plugins for jQuery can not only save lots of time, but also makes code much cleaner and easier to maintain.   -- Robert Duchnik, jQuery Plugin Development In 30 Minutes	https://www.goodreads.com/quotes/tag/computer-science
Just as functions within computer science, ecosystems must become first-class citizens in biology. First-class functions are not merely sequences of steps, but genuine entities, which can be passed as arguments to and from other functions in the same manner as other data types. Languages that support this concept have a fundamentally greater expressive power than those that relegate functions to the status of 'second-class citizens' relative to first-class 'data' objects. Biology needs an analogous expressive power in order to refer properly to the role of ecosystems as carriers of fundamental patterns, and as entities parallel to and in some ways superseding organisms.   -- Eric Smith, The Origin and Nature of Life on Earth: The Emergence of the Fourth Geosphere	https://www.goodreads.com/quotes/tag/computer-science
Lilah did little more than sleep and eat and cry, which to me was the most fascinating thing in the entire universe. Why did she cry? When did she sleep? What made her eat a lot one day and little the next? Was she changing with time? I did what any obsessed person would do in such a case: I recorded data, plotted it, calculated statistical correlations. First I just wrote on scraps of paper and made charts on graph paper, but I very quickly became more sophisticated. I wrote computer software to make a beautifully colored plot showing times when Diane fed Lilah, in black; when I fed her, in blue (expressed mother's milk, if you must know); Lilah's fussy times, in angry red; her happy times, in green. I calculated patterns in sleeping times, eating times, length of sleep, amounts eaten.	https://www.goodreads.com/quotes/tag/computer-science
loop { work(); play(); ; // <-- empty statement } Rust follows the tradition of C in allowing this. Empty statements do nothing except convey a slight feeling of melancholy. We mention them only for completeness.   -- Jim Blandy, Jason Orendorff, Programming Rust: Fast, Safe Systems Development	https://www.goodreads.com/quotes/tag/computer-science
Loving what you do, doing what you love   -- Randall Hyde, Write Great Code, Volume 3: Engineering Software	https://www.goodreads.com/quotes/tag/computer-science
Machine learning, in the simplest terms, is the analysis of statistics to help computers make decisions base on repeatable characteristics found in the data.   -- Vardhan Kishore Agrawal	https://www.goodreads.com/quotes/tag/computer-science
Most improved things can be improved.   -- Mokokoma Mokhonoana	https://www.goodreads.com/quotes/tag/computer-science
No matter which field of work you want to go in, it is of great importance to learn at least one programming language.   -- Ram Ray	https://www.goodreads.com/quotes/tag/computer-science
No program can say what another will do. Now, I won’t just assert that, I’ll prove it to you. I will prove that although you might work till you drop, You cannot tell if computation will stop.   -- Geoffrey K. Pullum	https://www.goodreads.com/quotes/tag/computer-science
No technology that's connected to the internet is unhackable.   -- Abhijit Naskar, The Gospel of Technology	https://www.goodreads.com/quotes/tag/computer-science
Nothing is more practical than a good theory.   -- Vladimir N Vapnik	https://www.goodreads.com/quotes/tag/computer-science
Nothing is more practical than a good theory.   -- Vladimir N Vapnik	https://www.goodreads.com/quotes/tag/computer-science
One of the goals of this book is to show that, at least in the problems of statistical inference, this is not true. I would like to demonstrate that in the area of science a good old principle is valid:	https://www.goodreads.com/quotes/tag/computer-science
Overstimulation has been the real drawback. I need to find ways to stop thinking about analysis of algorithms, in order to do various other things that human beings ought to do.   -- Donald Ervin Knuth, Selected Papers on Computer Science	https://www.goodreads.com/quotes/tag/computer-science
Pascal is for building pyramids -- imposing, breathtaking, static structures built by armies pushing heavy blocks into place. Lisp is for building organisms -- imposing, breathtaking, dynamic structures built by squads fitting fluctuating myriads of simpler organisms into place.   -- Harold Abelson; Gerald Jay Sussman; Julie Sussman; Eiichi Wada	https://www.goodreads.com/quotes/tag/computer-science
Perhaps the most important principle for the good algorithm designer is to refuse to be content.   -- Alfred V. Aho	https://www.goodreads.com/quotes/tag/computer-science
Programming in machine code is like eating with a toothpick.   -- Charles Petzold, Code: The Hidden Language of Computer Hardware and Software	https://www.goodreads.com/quotes/tag/computer-science
Programs should always have the form of paragraphs of comments that describe the intention of the program followed by paragraphs of code that implement that intention. All of the formatting should be designed to make readers as able as possible to read the code easily; the compiler doesn’t care. In particular, follow conventions of mathematics and your native language, not those you found in some random language manual. Write the comments first and then write the code, not the other way around. If you don’t know what you want to achieve and why, any code you write is, by definition, incorrect.   -- Charles Wetherell, Etudes for Programmers	https://www.goodreads.com/quotes/tag/computer-science
Q: Why bother doing proofs about programming languages? They are almost always boring if the definitions are right.  A: The definitions are almost always wrong.  - Anonymous   -- Benjamin C. Pierce	https://www.goodreads.com/quotes/tag/computer-science
religious beliefs, especially if those beliefs are strongly held. Further, scientists have hopes, standards, and ethical beliefs, and they—like anybody—are not eager to find that their beliefs are invalid.   -- James Kennedy, Swarm Intelligence	https://www.goodreads.com/quotes/tag/computer-science
Reusability is key in reducing bugs and coding quickly. The more I use a piece of code, the more confident and familiar I become with it, which in turn significantly speeds up my development time.   -- Robert Duchnik, jQuery Plugin Development In 30 Minutes	https://www.goodreads.com/quotes/tag/computer-science
Seemingly innocuous language like 'Oh, I'm flexible' or 'What do you want to do tonight?' has a dark computational underbelly that should make you think twice. It has the veneer of kindness about it, but it does two deeply alarming things. First, it passes the cognitive buck: 'Here's a problem, you handle it.' Second, by not stating your preferences, it invites the others to simulate or imagine them. And as we have seen, the simulation of the minds of others is one of the biggest computational challenges a mind (or machine) can ever face.   -- Brian Christian, Algorithms to Live By: The Computer Science of Human Decisions	https://www.goodreads.com/quotes/tag/computer-science
Simple things should be simple, complex things should be possible.   -- Alan Kay	https://www.goodreads.com/quotes/tag/computer-science
Simply In Depth......   -- Ajit Singh	https://www.goodreads.com/quotes/tag/computer-science
Software is like entropy: It is difficult to grasp, weighs nothing, and obeys the Second Law of Thermodynamics; i.e., it always increases.   -- Norman Augustine	https://www.goodreads.com/quotes/tag/computer-science
Spreadsheets are more important to marketing than pretty pictures these days.   -- Trevor Carss	https://www.goodreads.com/quotes/tag/computer-science
Stop pushing people into web development as if it is the only true career path. Instead, push people into computer science, programming, coding, etc. There is so much competition because everyone is doing it, you just create a lot of demoralized and disgruntled people. There is more to programming than web development.   -- Olawale Daniel	https://www.goodreads.com/quotes/tag/computer-science
Suppose whatever we can recognize we can find. We can if P=NP.   -- Lance Fortnow, The Golden Ticket: P, Np, and the Search for the Impossible	https://www.goodreads.com/quotes/tag/computer-science
Tests are stories we tell the next generation of programmers on a project.   -- Roy Osherove, The Art of Unit Testing: With Examples in .NET	https://www.goodreads.com/quotes/tag/computer-science
The advantage of subdividing the heap is that multiple threads can each allocate objects at the same time without interfering with one another. Further, by allocating object used by the same thread from the same memory region, cache hit rates may improve.   -- Thomas Anderson, Operating Systems: Principles and Practice	https://www.goodreads.com/quotes/tag/computer-science
The Analytical Engine has no pretensions whatever to originate anything. It can do whatever we know how to order it to perform.   -- Ada Lovelace	https://www.goodreads.com/quotes/tag/computer-science
The best programs are written so that computing machines can perform them quickly and so that human beings can understand them clearly. A programmer is ideally an essayist who works with traditional aesthetic and literary forms as well as mathematical concepts, to communicate the way that an algorithm works and to convince a reader that the results will be correct.   -- Donald E. Knuth, Selected Papers on Computer Science	https://www.goodreads.com/quotes/tag/computer-science
The business we're in is more sociological than technological, more dependent on workers' abilities to communicate with each other than their abilities to communicate with machines.   -- Tom DeMarco, Peopleware: Productive Projects and Teams	https://www.goodreads.com/quotes/tag/computer-science
The clarity offered by software as metaphor - and the empowerment allegedly offered to us who know software - should make us pause, because software also engenders a sense of profound ignorance. Software is extremely difficult to comprehend. Who really knows what lurks behind our smiling interfaces, behind the objects we click and manipulate? Who completely understands what one’s computer is actually doing at any given moment? Software as a metaphor for metaphor troubles the usual functioning of metaphor, that is, the clarification of an unknown concept through a known one. For, if software illuminates an unknown, it does so through an unknowable (software). This paradox - this drive to grasp what we do not know through what we do not entirely understand… does not undermine, but rather grounds software’s appeal. Its combination of what can be seen and not seen, can be known and no known - it’s separation of interface from algorithm, of software from hardware - makes it a powerful metaphor for everything we believe is invisible yet generates visible effects, from genetics to the invisible hand of the market, from ideology to culture. Every use entails an act of faith.   -- Wendy Hui Kyong Chun, Programmed Visions: Software and Memory	https://www.goodreads.com/quotes/tag/computer-science
The component structure cannot be designed from the top down. It is not one of the first things about the system that is designed, but rather evolves as the system grows and changes.   -- Robert C. Martin, Clean Architecture	https://www.goodreads.com/quotes/tag/computer-science
The computer only gives back ourselves. It is a faithful mirror that reflects the human traits that are brought to it.   -- William Barrett, The Illusion of Technique: A Search for Meaning in a Technological Civilization	https://www.goodreads.com/quotes/tag/computer-science
The computing scientist’s main challenge is not to get confused by the complexities of his own making.   -- Edsger W. Dijkstra	https://www.goodreads.com/quotes/tag/computer-science
The cost of electrons and photons is getting cheaper all the time!   -- T. Gilling, The STREAM TONE: The Future of Personal Computing?	https://www.goodreads.com/quotes/tag/computer-science
The DQN AI system of Google DeepMind can accomplish a slightly broader range of goals: it can play dozens of different vintage Atari computer games at human level or better. In contrast, human intelligence is thus far uniquely broad, able to master a dazzling panoply of skills.	https://www.goodreads.com/quotes/tag/computer-science
The great paradox of automation is that the desire to eliminate human labor always generates new tasks for humans.   -- Mary L. Gray, Ghost Work: How to Stop Silicon Valley from Building a New Global Underclass	https://www.goodreads.com/quotes/tag/computer-science
The ocean is a Turing machine, the sand is its tape; the water reads the marks in the sand and sometimes erases them and sometimes carves new ones with tiny currents that are themselves a response to the marks.   -- Neal Stephenson, Cryptonomicon	https://www.goodreads.com/quotes/tag/computer-science
The only way to make sure that you don't lose your job with the arrival of AI, is to do something that AI cannot do, and the only thing that artificial intelligence cannot do but a human can, is being original. So, do something original and no AI can ever replace you.   -- Abhijit Naskar	https://www.goodreads.com/quotes/tag/computer-science
The original Ethernet consisted of a fat cable into which a wire coming from each computer was forcibly inserted using what was euphemistically referred to a vampire tap.   -- Andrew Tanenbaum	https://www.goodreads.com/quotes/tag/computer-science
The pipeline assumes a passive flow of women (and men) from one stage to the next culminating in a scientific career.   -- Enobong Hannah Branch, Pathways, Potholes, and the Persistence of Women in Science: Reconsidering the Pipeline	https://www.goodreads.com/quotes/tag/computer-science
The question of whether a computer can think is no more interesting than the question of whether a submarine can swim.   -- Edsger W. Dijkstra	https://www.goodreads.com/quotes/tag/computer-science
The silicon microchips themselves might be cheap (relative to times past, anyway), but CPU cycles are not cheap. Every CPU cycle consumes clock time. Clock time is latency. A wasteful application makes its users wait longer than they need to, and if there’s anything users hate, it’s waiting. For web systems, latency in the application has a dual effect. The added processing directly increases the burden on the application servers themselves. Suppose that an application takes just 250 milliseconds of extra processing per transaction. If the system processes a million transactions a day, that extra 250 milliseconds per transaction makes for an extra 69.4 hours of compute time every day. Assuming an 80% load factor on each server, you’ll need four additional servers to handle this load.   -- Michael T. Nygard, Release It!: Design and Deploy Production-Ready Software	https://www.goodreads.com/quotes/tag/computer-science
The spectacle's instruction and the spectators' ignorance are wrongly seen as antagonistic factors when in fact they give birth to each other. In the same way, the computer's binary language is an irresistible inducement to the continual and unreserved acceptance of what has been programmed according to the wishes of someone else and passes for the timeless source of a superior, impartial and total logic. Such progress, such speed, such breadth of vocabulary! Political? Social? Make your choice. You cannot have both. My own choice is inescapable. They are jeering at us, and we know whom these programs are for. Thus it is hardly surprising that children should enthusiastically start their education at an early age with the Absolute Knowledge of computer science; while they are still unable to read, for reading demands making judgements at every line; and is the only access to the wealth of pre-spectacular human experience. Conversation is almost dead, and soon so too will be those who knew how to speak.   -- Guy Debord, Comments on the Society of the Spectacle	https://www.goodreads.com/quotes/tag/computer-science
The string is a stark data structure and everywhere it is passed there is much duplication of process. It is a perfect vehicle for hiding information.   -- Alan J. Perlis	https://www.goodreads.com/quotes/tag/computer-science
The very last stage of any memory hierarchy is necessarily the outside world—that is, the outside world as far as the machine is concerned, i.e. that part of it with which the machine can directly communicate, in other words, the input and the output organs of the machine. These are usually punched paper tapes or cards, and on the output side, of course, also printed paper.   -- John von Neumann, The Computer and the Brain	https://www.goodreads.com/quotes/tag/computer-science
Then, I did what any obsessed person would do these days; I put it all on the Web.   -- Mike Brown, How I Killed Pluto and Why It Had It Coming	https://www.goodreads.com/quotes/tag/computer-science
There are 2 hard problems in computer science: cache invalidation, naming things, and off-by-1 errors.   -- Leon Bambrick	https://www.goodreads.com/quotes/tag/computer-science
Thinking about small things every day from today will lead you to rise to the ranks of Donald Knuth and Alan Turing in a few years.   -- Aditya Chatterjee, How to read a Computer Science Research paper?	https://www.goodreads.com/quotes/tag/computer-science
This relation of program to environment opened up an exceedingly important role for computer simulation as a tool for achieving a deeper understanding of human behavior. For if it is the organization of components, and not their physical properties, that largely determines behavior, and if computers are organized somewhat in the image of man, then the computer becomes an obvious device for exploring the consequences of alternative organizational assumptions for human behavior. Psychology could move forward without awaiting the solutions by neurology of the problems of component design—however interesting and significant these components turn out to be.   -- Herbert A. Simon, The Sciences of the Artificial	https://www.goodreads.com/quotes/tag/computer-science
Ultimately, I try to think of my application’s main codebase as just stringing together various components and code from many sources. It just controls logic and flow. The real nitty-gritty is handled behind the scenes. This is why frameworks like Backbone are so important — they hide a lot of the details in the background and allow you to just focus on the flow and control of your application.   -- Robert Duchnik, jQuery Plugin Development In 30 Minutes	https://www.goodreads.com/quotes/tag/computer-science
Underlying our approach to this subject is our conviction that "computer science" is not a science and that its significance has little to do with computers. The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called procedural epistemology—the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects. Mathematics provides a framework for dealing precisely with notions of "what is". Computation provides a framework for dealing precisely with notions of "how to".   -- Harold Abelson, Structure and Interpretation of Computer Programs	https://www.goodreads.com/quotes/tag/computer-science
Unix is not so much a product as it is a painstakingly compiled oral history of the hacker subculture. It is our Gilgamesh epic: a living body of narrative that many people know by heart, and tell over and over again—making their own personal embellishments whenever it strikes their fancy. The bad embellishments are shouted down, the good ones picked up by others, polished, improved, and, over time, incorporated into the story. […] Thus Unix has slowly accreted around a simple kernel and acquired a kind of complexity and asymmetry about it that is organic, like the roots of a tree, or the branchings of a coronary artery. Understanding it is more like anatomy than physics.   -- Neal Stephenson	https://www.goodreads.com/quotes/tag/computer-science
Want to guarantee nasty conflicts? Take a word with multiple, fuzzy, definitions, force people to strike an agreement on it, attach large amounts of money to it, and then watch them fight about it a year or two later.   -- Michael T. Nygard, Release It!: Design and Deploy Production-Ready Software	https://www.goodreads.com/quotes/tag/computer-science
We can think of life as a self-replicating information-processing system whose information (software) determines both its behavior and the blueprints for its hardware.   -- Max Tegmark, Life 3.0: Being Human in the Age of Artificial Intelligence	https://www.goodreads.com/quotes/tag/computer-science
We will start by sketching the recursive algorithm and then add details to get to a full description of the algorithm. Footnote : Translation: We will add details till the mess becomes both undecipherable and incomprehensible at the same time. Hopefully, the inner poetical and rhythmical beauty of the text will keep the reader going.   -- Sariel Har-Peled, Geometric Approximation Algorithms	https://www.goodreads.com/quotes/tag/computer-science
Well, writing novels is incredibly simple: an author sits down…and writes. Granted, most writers I know are a bit strange. Some, downright weird.But then again, you’d have to be. To spend hundreds and hundreds of hours sitting in front of a computer screen staring at lines of information is pretty tedious. More like a computer programmer. And no matter how cool the Matrix made looking at code seem, computer programmers are even weirder than authors.   -- Christopher Hopper	https://www.goodreads.com/quotes/tag/computer-science
What one programmer can do in one month, two programmers can do in two months.   -- Fred Brooks	https://www.goodreads.com/quotes/tag/computer-science
What's in your hands I think and hope is intelligence: the ability to see the machine as more than when you were ﬁrst led up to it that you can make it more.   -- Alan J. Perlis	https://www.goodreads.com/quotes/tag/computer-science
When human beings acquired language, we learned not just how to listen but how to speak. When we gained literacy, we learned not just how to read but how to write. And as we move into an increasingly digital reality, we must learn not just how to use programs but how to make them. In the emerging highly programmed landscape ahead, you will either create the software or you will be the software. It’s really that simple: Program, or be programmed.   -- Douglas Rushkoff, Program or Be Programmed: Ten Commands for a Digital Age	https://www.goodreads.com/quotes/tag/computer-science
When the ANSI C standard was under development, the pragma directive was introduced. Borrowed from Ada, #pragma is used to convey hints to the compiler, such as the desire to expand a particular function in-line or suppress range checks. Not previously seen in C, pragma met with some initial resistance from a gcc implementor, who took the implementation-defined effect very literally—in gcc version 1.34, the use of pragma causes the compiler to stop compiling and launch a computer game instead! The gcc manual contained the following: The #pragma command is specified in the ANSI standard to have an arbitrary implementation-defined effect. In the GNU C preprocessor, #pragma first attempts to run the game rogue; if that fails, it tries to run the game hack; if that fails, it tries to run GNU Emacs displaying the Tower of Hanoi; if that fails, it reports a fatal error. In any case, preprocessing does not continue. —Manual for version 1.34 of the GNU C compiler   -- Peter van der Linden, Expert C Programming: Deep C Secrets	https://www.goodreads.com/quotes/tag/computer-science
While functions being unable to change state is good because it helps us reason about our programs, there's one problem with that. If a function can't change anything in the world, how is it supposed to tell us what it calculated? In order to tell us what it calculated, it has to change the state of an output device (usually the state of the screen), which then emits photons that travel to our brain and change the state of our mind, man.   -- Miran Lipovača	https://www.goodreads.com/quotes/tag/computer-science
why bother with null and java 8 has optional   -- Ahmad Moawad	https://www.goodreads.com/quotes/tag/computer-science
Worse yet is the rejection of upfront requirements. The basic observation is correct: requirements will change, and are hard anyway to capture at the beginning. In no way, however, does it imply the dramatic conclusion that upfront requirements are useless! What it does imply is that requirements should be subject to change, like all other artifacts on the software process. [...] The agile advice here is irresponsible and serious software projects should ignore it.The sound practice is to start collecting requirements at the beginning, produce a provisional version prior to engaging in design, and treat the requirements as a living product that undergoes constant adaptation throughout the project.   -- Bertrand Meyer	https://www.goodreads.com/quotes/tag/computer-science
You are not reading this book because a teacher assigned it to you, you are reading it because you have a desire to learn, and wanting to learn is the biggest advantage you can have.   -- Cory Althoff, The Self-Taught Programmer: The Definitive Guide to Programming Professionally	https://www.goodreads.com/quotes/tag/computer-science
Programs must be written for people to read, and only incidentally for machines to execute. - H. Abelson and G. Sussman (in *The Structure and Interpretation of Computer Programs)	https://www.cs.cmu.edu/~pattis/quotations.html
The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called procedural epistemology--the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects. - H. Abelson and G. Sussman (in *The Structure and Interpretation of Computer Programs)	https://www.cs.cmu.edu/~pattis/quotations.html
We have also obtained a glimpse of another crucial idea about languages and program design. This is the approach of statified design, the notion that a complex system should be structured as a sequence of levels that are described using a sequence of languages. Each level is constructed by combining parts that are regarded as primitive at that level, and the parts constructed at each level are used as primitives at the next level. The language used at each level of a stratified design has primitives, means of combination, and means of abstraction appropriate to that level of detail. - H. Abelson and G. Sussman (in *The Structure and Interpretation of Computer Programs)	https://www.cs.cmu.edu/~pattis/quotations.html
A common mistake people make when trying to design something completely foolproof is to underestimate the ingenuity of complete fools. - D. Adams	https://www.cs.cmu.edu/~pattis/quotations.html
Good teaching is more a giving of the right questions than a giving of the right answers. - J. Albers	https://www.cs.cmu.edu/~pattis/quotations.html
They know enough who know how to learn - J. Adams	https://www.cs.cmu.edu/~pattis/quotations.html
Computer Science is a science of abstraction -creating the right model for a problem and devising the appropriate mechanizable techniques to solve it. - A. Aho and J. Ullman	https://www.cs.cmu.edu/~pattis/quotations.html
Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it in the same way twice. - C. Alexander	https://www.cs.cmu.edu/~pattis/quotations.html
Don't worry about people stealing your ideas. If your ideas are any good, you'll have to ram them down people's throats. - H. Aiken	https://www.cs.cmu.edu/~pattis/quotations.html
Eighty percent of success is showing up. - W. Allen	https://www.cs.cmu.edu/~pattis/quotations.html
If you're not failing every now and again, it's a sign you're not doing anything very innovative. - W. Allen	https://www.cs.cmu.edu/~pattis/quotations.html
More is different. - P. Anderson (attacking the reductionist hypothesis in science, by concluding that quantitatively larger systems can be qualitatively different)	https://www.cs.cmu.edu/~pattis/quotations.html
Today, most software exists, not to solve a problem, but to interface with other software. - I. O. Angell	https://www.cs.cmu.edu/~pattis/quotations.html
All programmers are playwrights and all computers are lousy actors. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Any programming problem can be solved by adding a level of indirection. (also see *Any performance problem...* by M. Haertel). - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Bad code isn't bad, its just misunderstood. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Debugging is anticipated with distaste, performed with reluctance, and bragged about forever. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Experience is a poor teacher: it gives its tests before it teaches its lessons. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
If I had eight hours to chop down a tree, I would spend 6 hours sharpening an axe. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
If you understand what you're doing, you're not learning anything. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
In theory, there is no difference between theory and practice, but not in practice. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
It is easier to measure something than to understand what you have measured. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Measure twice, cut once. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Microsoft, where quality is job 1.1 - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
On a visit to the NASA space center, President Kennedy spoke to a man sweeping up in one of the buildings. *What's your job here?* asked Kennedy. *Well Mr. President,* the janitor replied, *I'm helping to put a man on the moon*. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
One day a mother comes home from work and asks her son, *What did you do today?* The son replied, *I taught our dog how to play the piano.* The mother, incredulous, asked, *Our dog can play the piano?*, to which the son laughed and replied, *Of course not mom. I said that I taught him; I didn't say that he learned how.* - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Programming languages should be designed not by piling feature on top of feature, but by removing the weaknesses and restrictions that make additional features appear necessary. - Anonymous, Revised Report on the Algorithmic Language Scheme	https://www.cs.cmu.edu/~pattis/quotations.html
Programs for sale: Fast, Reliable, Cheap: choose two. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Ready, fire, aim (the fast approach to software development). Ready, aim, aim, aim, aim ... (the slow approach to software development). - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Real programmers don't comment their code. If it was hard to write, it should be hard to understand. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Recurses! Called again. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
The huge printing presses of a major Chicago newspaper began malfunctioning on the Saturday before Christmas, putting all the revenue for advertising that was to appear in the Sunday paper in jeopardy. None of the technicians could track down the problem. Finally, a frantic call was made to the retired printer who had worked with these presses for over 40 years. *We'll pay anything; just come in and fix them,* he was told. When he arrived, he walked around for a few minutes, surveying the presses; then he approached one of the control panels and opened it. He removed a dime from his pocket, turned a screw 1/4 of a turn, and said, *The presses will now work correctly.* After being profusely thanked, he was told to submit a bill for his work.  The bill arrived a few days later, for $10,000.00! Not wanting to pay such a huge amount for so little work, the printer was told to please itemize his charges, with the hope that he would reduce the amount once he had to identify his services. The revised bill arrived: $1.00 for turning the screw; $9,999.00 for knowing which screw to turn.  Commentary: most debugging problems are fixed easily; identifying the location of the problem is hard.  - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
The person who knows HOW will always have a job. The person who knows WHY will always be his/her boss. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
The sooner you get behind in your work, the more time you have to catch up. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
There are only 10 different kinds of people in the world: those who know binary and those who don't. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Think (design) globally; act (code) locally. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Think twice, code once. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Time is an excellent teacher; but eventually it kills all its students. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Weeks of programming can save you hours of planning. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
When a programming language is created that allows programmers to program in simple English, it will be discovered that programmers cannot speak English. - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
Why do we never have time to do it right, but always have time to do it over? - Anonymous	https://www.cs.cmu.edu/~pattis/quotations.html
By viewing the old we learn the new. - Anonymous Chinese Proverb	https://www.cs.cmu.edu/~pattis/quotations.html
Give me a fish and I eat for a day. Teach me to fish and I eat for a lifetime. - Anonymous Chinese Proverb	https://www.cs.cmu.edu/~pattis/quotations.html
He who asks is a fool for five minutes; he who does not ask remains a fool forever. - Anonymous Chinese Proverb	https://www.cs.cmu.edu/~pattis/quotations.html
Teachers open the door, but you must enter by yourself. - Anonymous Chinese Proverb	https://www.cs.cmu.edu/~pattis/quotations.html
Tell me and I forget. Show me and I remember. Involve me and I understand. - Anonymous Chinese Proverb	https://www.cs.cmu.edu/~pattis/quotations.html
The first step towards wisdom is calling things by their right names. - Anonymous Chinese Proverb	https://www.cs.cmu.edu/~pattis/quotations.html
The person who says it cannot be done should not interrupt the person doing it. - Anonymous Chinese Proverb	https://www.cs.cmu.edu/~pattis/quotations.html
He who is ashamed of asking is ashamed of learning. - Anonymous Danish Proverb	https://www.cs.cmu.edu/~pattis/quotations.html
No matter how far down the wrong road you have gone, turn back now. - Anonymous Turkish Proverb	https://www.cs.cmu.edu/~pattis/quotations.html
Those who know, do. Those who understand, teach. - Aristotle	https://www.cs.cmu.edu/~pattis/quotations.html
We are what we repeatedly do. Excellence, then, is not an act, but a habit. - Aristotle	https://www.cs.cmu.edu/~pattis/quotations.html
The most exciting phrase to hear in science -the one that heralds new discoveries- is not *Eureka!* but *That's funny...* - I. Asimov	https://www.cs.cmu.edu/~pattis/quotations.html
The Analytical Engine weaves Algebraical patterns just as the Jacquard loom weaves flowers and leaves. - A. Augusta, Countess of Lovelace, on Babbage's Analytical Engine	https://www.cs.cmu.edu/~pattis/quotations.html
On two occasions, I have been asked [by members of Parliament], *Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?* I am not able to rightly apprehend the kind of confusion of ideas that could provoke such a question. - C. Babage	https://www.cs.cmu.edu/~pattis/quotations.html
I, myself, have had many failures and I've learned that if you are not failing a lot, you are probably not being as creative as you could be -you aren't stretching your imagination. - J. Backus	https://www.cs.cmu.edu/~pattis/quotations.html
A prudent question is one-half of wisdom. - F. Bacon	https://www.cs.cmu.edu/~pattis/quotations.html
I can only think that the book is read because it deals with the difficulties of schooling, which do not change. Please note: the difficulties, not the problems. Problems are solved or disappear with the revolving times. Difficulities remain. It will always be difficult to teach well, to learn accurately; to read, write, and count readily and competently; to acquire a sense of history and start one's education or anothers. - J. Barzun (*Begin Here*, pp 14),	https://www.cs.cmu.edu/~pattis/quotations.html
The American university is built on two false premises: that all teachers must add to the existing stock of knowledge by research, and that all self-respecting institutions fulfill this role only by employing productive scholars...Of course, the teacher must keep reading and thinking abreast of his time, but this does not mean that he must write and publish. The confusion hides a further absurd assumption, which is that when a man writes a scholarly book that reaches a dozen specialists he adds immeasurably to the world's knowledge; whereas if he imparts his thoughts and his reading to one hundred and fifty students every year, he is wasting his time and leaving the world in darkness. One is tempted to ask what blinkered pedant ever launched the notion that students in coming to college seceded from the human race and may therefore be safely left out when knowledge is being broadcast. - J. Barzun (*Teacher in America*),	https://www.cs.cmu.edu/~pattis/quotations.html
The sole justification of teaching, of the school itself, is that the student comes out of it able to do something he could not do before. I say do and not know, because knowledge that doesn't lead to doing something new or doing something better is not knowledge at all. - J. Barzun (*Begin Here*, pp 112),	https://www.cs.cmu.edu/~pattis/quotations.html
The truth is, when all is said and done, one does not teach a subject, one teaches a student how to learn it. Teaching may look like administering a dose, but even a dose must be worked on by the body if it is to cure. Each individual must cure his or her own ignorance. - J. Barzun (*Begin Here*, pp 35),	https://www.cs.cmu.edu/~pattis/quotations.html
Optimism is an occupational hazard of programming: testing is the treatment. - K. Beck	https://www.cs.cmu.edu/~pattis/quotations.html
The cheapest, fastest, and most reliable components of a computer system are those that aren't there. - G. Bell	https://www.cs.cmu.edu/~pattis/quotations.html
Dakin (to Irwin, his teacher): Do you really believe that, sir, or are you just trying to make us think? - A. Bennet (in *The History Boys*)	https://www.cs.cmu.edu/~pattis/quotations.html
The key to performance is elegance, not batallions of special cases. - J. Bently & D. McIlroy	https://www.cs.cmu.edu/~pattis/quotations.html
Walking on water and developing software from a specification are easy if both are frozen. - E. Berard	https://www.cs.cmu.edu/~pattis/quotations.html
More than the act of testing, the act of designing tests is one of the best bug preventers known. The thinking that must be done to create a useful test can discover and eliminate bugs before they are coded - indeed, test-design thinking can discover and eliminate bugs at every stage in the creation of software, from conception to specification, to design, coding and the rest - B. Bezier	https://www.cs.cmu.edu/~pattis/quotations.html
Percy:  You know, they do say that the Infanta's eyes are more beautiful         than the famous Stone of Galveston.  Edmund: Mm! ... What? Percy:  The famous Stone of Galveston, My Lord. Edmund: And what's that, exactly? Percy:  Well, it's a famous blue stone, and it comes ... from Galveston. Edmund: I see. And what about it? Percy:  Well, My Lord, the Infanta's eyes are bluer than it, for a start. Edmund: I see. And have you ever seen this stone? Percy:  (nods) No, not as such, My Lord, but I know a couple of people who          have, and they say it's very very blue indeed.  Edmund: And have these people seen the Infanta's eyes? Percy:  No, I shouldn't think so, My Lord. Edmund: And neither have you, presumably. Percy:  No, My Lord. Edmund: So, what you're telling me, Percy, is that something you have never         seen is slightly less blue than something else you have never seen. Percy:  (finally begins to grasp) Yes, My Lord. I sometimes feel this way when trying to explain a new programming concept. - From the Queen of Spain's Beard episode of Blackadder	https://www.cs.cmu.edu/~pattis/quotations.html
There is a division in the student population between those who go to college to learn and those who go to college to earn a diploma. - J. Blau (letter to the editor, Chronicle of Higher Education, May 24, 2002)	https://www.cs.cmu.edu/~pattis/quotations.html
It is wrong to think that the task of physics is to find out how nature is. Physics concerns what we say about nature. - N. Bohr	https://www.cs.cmu.edu/~pattis/quotations.html
Opposites are not contradictory but complementary. - N. Bohr	https://www.cs.cmu.edu/~pattis/quotations.html
Software development has been, is, and will likely remain fundamentally hard. Building quality systems involves an essential and irreducible complexity, which is why the entire history of software engineering can be characterized as one of rising levels of abstraction. As such, the task of the software development team is to engineer the illusion of simplicity. Nonetheless, software-intensive systems can amplify human intelligence, but they cannot replace human judgment; software-intensive systems can fuse, co-ordinate, classify, and analyze information, but they cannot create knowledge. In other words, not everything we want to build can be built: there exist pragmatic theoretical and technical limits that make software develpment hard if not impossible. Furthermore, not everything we want to build should be built: there exist moral economic, social, and political limits that govern human industry. From fundamental to human, these are the factors tht define the limits of software, factors that separate our vision from execution. - G. Booch (in a blurb from a talk, *The Limits of Software*)	https://www.cs.cmu.edu/~pattis/quotations.html
That language is an instrument of human reason, and not merely a medium for the expression of thought, is a truth generally admitted. - G. Boole	https://www.cs.cmu.edu/~pattis/quotations.html
The greatest obstacle to discovery is not ignorance, but the illusion of knowledge. - D. Boorstin	https://www.cs.cmu.edu/~pattis/quotations.html
The most likely way for the world to be destroyed, most experts agree, is by accident. That's where we come in; we're computer professionals. We cause accidents. - N. Borenstein	https://www.cs.cmu.edu/~pattis/quotations.html
All models are wrong; some models are useful. - G. Box	https://www.cs.cmu.edu/~pattis/quotations.html
Simplicity and flexibility will trump optimization and power in a world where connectivity is the key. - A. Bosworth (paraphrased by David Bank in Breaking Windows, page 203)	https://www.cs.cmu.edu/~pattis/quotations.html
The important thing in science is not so much to obtain new facts as to discover new ways of think about them. - W. Bragg	https://www.cs.cmu.edu/~pattis/quotations.html
Information wants too be free. Information also wants to be expensive. Information wants to be free because it has become so cheap to distribute, copy, and recombine---too cheap to meter. It wants to be expensive because it can be immeasurably valuable to the recipient. That tension will not go away. It leads to endless wrenching debate about price, copyright, *intellectual property*, the moral rightness of casual distribution, because each round of new devices makes the tension worse, not better. - S. Brand (see the Information Wants to Be Free web page)	https://www.cs.cmu.edu/~pattis/quotations.html
It is important that students bring a certain ragamuffin, barefoot irreverence to their studies; they are not here to worship what is known, but to question it. - J. Bronowski	https://www.cs.cmu.edu/~pattis/quotations.html
That is the essence of science: ask an impertinent question, and you are on the way to a pertinent answer. - J. Bronowski	https://www.cs.cmu.edu/~pattis/quotations.html
Welcome to Yale. Yale will be for you and to you what you make of it. Despite the gloom of the times this is not a gloomy place. It is a place where life can have purpose without being a society of driven men and women. It is also a place where there is no escape from argument, for the next person you meet will not be likely to agree with the last person talked to. This is a community which rewards participation but does not expect conformity. This is primarily a place for learning, but not all learning is in books or laboratories or classrooms. You probably have not been as free before. You may not be as free again. Enjoy the privilege of doubt. Make the most of it. - K. Brewster	https://www.cs.cmu.edu/~pattis/quotations.html
Good judgment comes from experience; experience comes from bad judgment. - F. Brooks	https://www.cs.cmu.edu/~pattis/quotations.html
Plan to throw one away; you will anyhow. - F. Brooks (*The Mythical Man-Month*, Chapter 11)	https://www.cs.cmu.edu/~pattis/quotations.html
If you plan to throw one away, you will throw away two. - C. Zerouni	https://www.cs.cmu.edu/~pattis/quotations.html
Scientists build to learn; Engineers learn to build. - F. Brooks	https://www.cs.cmu.edu/~pattis/quotations.html
The hardest part of the software task is arriving at a complete and consistent specification, and much of the essence of building a program is in fact the debugging of the specification. - F. Brooks	https://www.cs.cmu.edu/~pattis/quotations.html
The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures. Yet the program construct, unlike the poet's words, is real in the sense that it moves and works, producing visible outputs separate from the construct itself. It prints results, draws pictures, produces sounds, moves arms. The magic of myth and legend has come true in our time. One types the correct incantation on a keyboard, and a display screen comes to life, showing things that never were nor could be. ... The computer resembles the magic of legend in this respect, too. If one character, one pause, of the incantation is not strictly in proper form, the magic doesn't work. Human beings are not accustomed to being perfect, and few areas of human activity demand it. Adjusting to the requirement for perfection is, I think, the most difficult part of learning to program. - F. Brooks (*The Mythical Man Month*, pages 7-8)	https://www.cs.cmu.edu/~pattis/quotations.html
Successful software always gets changed. - F. Brooks	https://www.cs.cmu.edu/~pattis/quotations.html
A man's reach should exceed his grasp, or what's heaven for? - R. Browning	https://www.cs.cmu.edu/~pattis/quotations.html
They may forget what you said, but they will never forget how you made them feel. - C. Buchner	https://www.cs.cmu.edu/~pattis/quotations.html
...and then it occurred to me that a computer is a stupid machine with the ability to do incredibly smart things, while computer programmers are smart people with the ability to do incredibly stupid things. They are, in short, a perfect match. - B. Bryson	https://www.cs.cmu.edu/~pattis/quotations.html
Learning how to learn is life's most important skill. - T. Buzan	https://www.cs.cmu.edu/~pattis/quotations.html
The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time. - T. Cargill	https://www.cs.cmu.edu/~pattis/quotations.html
The sooner you start to code, the longer the program will take. - R. Carlson	https://www.cs.cmu.edu/~pattis/quotations.html
The important point is that the cost of adding a feature isn't just the time it takes to code it. The cost also includes the addition of an obstacle to future expansion. Sure, any given feature list can be implemented, given enough coding time. But in addition to coming out late, you will usually wind up with a codebase that is so fragile that new ideas that should be dead-simple wind up taking longer and longer to work into the tangled existing web. The trick is to pick the features that don't fight each other. - J. Carmack	https://www.cs.cmu.edu/~pattis/quotations.html
We think too much about effective methods of teaching and not enough about effective methods of learning. No matter how good teaching may be, each student must take the responsibility for his own education. - J. Carolus S.J.	https://www.cs.cmu.edu/~pattis/quotations.html
In a way, math isn't the art of answering mathematical questions, it is the art of asking the right questions, the questions that give you insight, the ones that lead you in interesting directions, the ones that connect with lots of other interesting questions -the ones with beautiful answers. - G. Chaitin (pg. 23, in *Meta Math: The Quest for Omega*)	https://www.cs.cmu.edu/~pattis/quotations.html
Mathematical truth is not totally objective. If a mathematical statement is false, there will be no proofs, but if it is true, thre will be an endless variety of proofs, not just one! Proofs are not impersonal, they express the personality of their creator/discoverer just as much as literary efforts do. If something important is true, there will be many reasons that it is true, many proofs of that fact. Math is the music of reason, and some proofs sound like jazz, others sound like a fugue. Which is better, the jazz or the fugue? Neither: it's all a matter of taste...each proof will emphasize different aspects of the problem, each proof will lead in a different direction. Each one will have different corollaries, different generalizations...Mathematical facts are not isolated, they are woven into a vast spider's web of interconnections. - G. Chaitin (pg. 23, in *Meta Math: The Quest for Omega*)	https://www.cs.cmu.edu/~pattis/quotations.html
Any sufficiently advanced technology is indistinguishable from magic. - A. Clarke	https://www.cs.cmu.edu/~pattis/quotations.html
We don't have time to stop for gas, we're already late. - M. Cleron (Commenting on how Software Projects are often Run)	https://www.cs.cmu.edu/~pattis/quotations.html
Whenever there is a hard job to be done I assign it to a lazy man; he is sure to find an easy way of doing it. - W. Chrysler	https://www.cs.cmu.edu/~pattis/quotations.html
The real technology -behind all our other technologies- is language. It actually creates the world our consciousness lives in - A. Codrescu	https://www.cs.cmu.edu/~pattis/quotations.html
I hear and I forget; I see and I remember; I do and I understand. - Confucius	https://www.cs.cmu.edu/~pattis/quotations.html
Never hesitate to ask a lesser person. - Confucius	https://www.cs.cmu.edu/~pattis/quotations.html
Press on. Nothing in th world can take the place of persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education alone will not; the world is full of educated derelicts. Persistence and determination alone are omnipotent. - C. Coolidge	https://www.cs.cmu.edu/~pattis/quotations.html
Six jokes: *What do you get when you cross a computer with an airplane? What do you get when you cross a computer with a camera? What do you get when you cross a computer with an alarm clock? What do you get when you cross a computer with a car? What do you get when you cross a computer with a bank? What do you get when you cross a computer with a warship?* In all six cases the answer is *A computer.* [Cooper illustrates how the nature of these systems becomes dominated by the nature of their computer components]  - A. Cooper (I'm paraphrasing some pictures and text appearing in *The Inmates are Running the Asylum*)	https://www.cs.cmu.edu/~pattis/quotations.html
The value of a prototype is in the education it gives you, not in the code itself. - A. Cooper (in *The Inmates are Running the Asylum*)	https://www.cs.cmu.edu/~pattis/quotations.html
When the words are fuzzy, the programmers reflexively retreat to the most precise method of articulation available: source code. Although there is nothing more precise than code, there is also nothing more permanent or resistant to change. So the situation frequently crops up where nomenclature confusion drives programmers to begin coding prematurely, and that code becomes the de facto design, regardless of its appropriateness or correctness. - A. Cooper (in *The Inmates are Running the Asylum*)	https://www.cs.cmu.edu/~pattis/quotations.html
Doing more things faster is no substitute for doing the right things. - S. R. Covey	https://www.cs.cmu.edu/~pattis/quotations.html
The generation of random numbers is too important to be left to chance. - R. Coveyou	https://www.cs.cmu.edu/~pattis/quotations.html
If you don't think carefully, you might believe that programming is just typing statements in a programming language. - W. Cunningham	https://www.cs.cmu.edu/~pattis/quotations.html
Who dares to teach must never cease to learn. - J.C. Dana	https://www.cs.cmu.edu/~pattis/quotations.html
Every now and then go away, have a little relaxation, for when you come back to your work your judgment will be surer. Go some distance away because then the work appears smaller and more of it can be taken in at a glance and a lack of harmony and proportion is more readily seen. - L. Da Vinci	https://www.cs.cmu.edu/~pattis/quotations.html
Simplicity is the ultimate sophistication. - L. Da Vinci	https://www.cs.cmu.edu/~pattis/quotations.html
If you cannot describe what you are doing as a process, you don't know what you're doing. - W. E. Deming	https://www.cs.cmu.edu/~pattis/quotations.html
Question authority; but, raise your hand first. - A. Dershowitz	https://www.cs.cmu.edu/~pattis/quotations.html
One can think effectively only when one is willing to endure suspense and to undergo the trouble of searching. - J. Dewey	https://www.cs.cmu.edu/~pattis/quotations.html
As long as there were no machines, programming was no problem at all; when we had a few weak computers, programming became a mild problem, and now [1972] that we have gigantic computers, programming has become a gigantic problem. As the power of available machines grew by a factor of more than a thousand, society's ambition to apply these new machines grew in proportion, and it was the poor programmer who found his job in this exploded field of tension between the ends and the means. The increased power of the hardware, together with the perhaps more dramatic increase in its reliability, made solutions feasible that the programmer had not dared to dream about a few years before. And now, a few years later, he had to dream about them and even worse, he had to transform such dreams into reality! It is no wonder that we found ourselves in a software crisis - E. Dijkstra (The Humble Programmer, *ACM Turing Award Lectures: The First 25 Years*, Addison-Wesley, 1987, pages 17-32)	https://www.cs.cmu.edu/~pattis/quotations.html
A most important, but also most elusive, aspect of any tool is its influence on the habits of those who train themselves in its use. If the tool is a programming language this influence is, whether we like it or not, an influence on our thinking habits.... A programming language is a tool that has profound influence on our thinking habits. - E. Dijkstra	https://www.cs.cmu.edu/~pattis/quotations.html
Being abstract is something profoundly different from being vague... The purpose of abstraction is not to be vague, but to create a new semantic level in which one can be absolutely precise. - E. Dijkstra	https://www.cs.cmu.edu/~pattis/quotations.html
Besides a mathematical inclination, an exceptionally good mastery of one's native tongue is the most vital asset of a competent programmer. - E. Dijkstra	https://www.cs.cmu.edu/~pattis/quotations.html
Computer Science is no more about computers than astronomy is about telescopes. - E. Dijkstra	https://www.cs.cmu.edu/~pattis/quotations.html
If we wish to count lines of code, we should not regard them as lines produced but as lines spent. - E. Dijkstra	https://www.cs.cmu.edu/~pattis/quotations.html
John von Neumann draws attention to what seemed to him a contrast. He remarked that for simple mechanisms, it is often easier to describe how they work than what they do, while for more complicated mechanisms, it is usually the other way around. - E. Dijkstra (Trip Reports, 213)	https://www.cs.cmu.edu/~pattis/quotations.html
Object-oriented programming is an exceptionally bad idea which could only have originated in California - E. Dijkstra (note: OOP originated in Norway, quite near Holland -Dijkstra's home)	https://www.cs.cmu.edu/~pattis/quotations.html
...our intellectual powers are rather geared to master static relations and that our powers to visualize processes evolving in time are relatively poorly developed. For that reason we should do (as wise programmers aware of our limitations) our utmost to shorten the conceptual gap between the static program and the dynamic process, to make the correspondence between the program (spread out in text space) and the process (spread out in time) as trivial as possible. - E. Dijkstra (in *Goto Considered Harmful*)	https://www.cs.cmu.edu/~pattis/quotations.html
Progress is possible only if we train ourselves to think about programs without thinking of them as pieces of executable code. - E. Dijkstra	https://www.cs.cmu.edu/~pattis/quotations.html
Simplicity is prerequisite for reliability. - E. Dijkstra	https://www.cs.cmu.edu/~pattis/quotations.html
...Simplifications have had a much greater long-range scientific impact than individual feats of ingenuity. The opportunity for simplification is very encouraging, because in all examples that come to mind the simple and elegant systems tend to be easier and faster to design and get right, more efficient in execution, and much more reliable than the more contrived contraptions that have to be debugged into some degree of acceptability....Simplicity and elegance are unpopular because they require hard work and discipline to achieve and education to be appreciated. - E. Dijkstra (The Tide, not the waves; in Denning/Metcalfe: Beyond Calculation, Springer-Verlag 1997)	https://www.cs.cmu.edu/~pattis/quotations.html
The tools we use have a profound (and devious!) influence on our thinking habits, and, therefore, on our thinking abilities. - E. Dijkstra	https://www.cs.cmu.edu/~pattis/quotations.html
Testing can show the presence of errors, but not their absence. - E. Dijkstra	https://www.cs.cmu.edu/~pattis/quotations.html
The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility, and among other things he avoids clever tricks like the plague. - E. Dijkstra (in *The Humble Programmer*, his 1972 Turing Award Lecture)	https://www.cs.cmu.edu/~pattis/quotations.html
The art of programming is the arto of organizaing complexity, of mastering multitude and avoiding its bastard chaos. - E. Dijkstra (in *Notes on Structured Programmin*)	https://www.cs.cmu.edu/~pattis/quotations.html
We are all shaped by the tools we use, in particular: the formalisms we use shape our thinking habits, for better or for worse, and that means that we have to be very careful in the choice of what we learn and teach, for unlearning is not really possible. - E. Dijkstra (in Answers to Questions from Students of Sofware Engineering)	https://www.cs.cmu.edu/~pattis/quotations.html
Yes, I share your concern: how to program well -though a teachable topic- is hardly taught. The situation is similar to that in mathematics, where the explicit curriculum is confined to mathematical results; how to do mathematics is something the student must absorb by osmosis, so to speak. One reason for preferring symbol-manipulating, calculating arguments is that their design is much better teachable than the design of verbal/pictorial arguments. Large-scale introduction of courses on such calculational methodology, however, would encounter unsurmoutable political problems	https://www.cs.cmu.edu/~pattis/quotations.html
- E. Dijkstra (in Answers to Questions from Students of Sofware Engineering)	https://www.cs.cmu.edu/~pattis/quotations.html
Text is linear; it is black and white; it doesn't zoom around the page in 3-D; it isn't intelligent by itself; in fact, in terms of immediate reaction it is quite boring. I can't imagine a single preliterate was ever wowed at the first sight of text, and yet text has been the basis of arguably the most fundamental intellectual transformation of the human species. It and its subforms, such as algebra, have made science education for all a plausible goal. - A.diSessa (*Changing Minds: Computers, Learning, and Literacy*, MIT Press, 2000; page 112)	https://www.cs.cmu.edu/~pattis/quotations.html
There is nothing so useless as doing efficiently that which should not be done at all. - P. Drucker	https://www.cs.cmu.edu/~pattis/quotations.html
The first step in fixing a broken program is getting it to fail repeatably [on the simplest example possible]. - T. Duff	https://www.cs.cmu.edu/~pattis/quotations.html
It's supposed to be hard! If it wasn't hard, everyone would do it. The hard... is what makes it great!* - J. Dugan (said by Tom Hanks' character in *A League of Their Own* in response to a complaint from one of his ball players)	https://www.cs.cmu.edu/~pattis/quotations.html
Genius is 1 percent inspiration and 99 percent perspiration. As a result, genius is often a talented person who has simply done all of his homework. - T. Edison	https://www.cs.cmu.edu/~pattis/quotations.html
Any intelligent fool can make things bigger, more complex, and more violent. It takes a touch of genius - and a lot of courage - to move in the opposite direction - A. Einstein	https://www.cs.cmu.edu/~pattis/quotations.html
Everything should be made as simple as possible, but not simpler. - A. Einstein	https://www.cs.cmu.edu/~pattis/quotations.html
Example isn't another way to teach. It is the only way to teach. - A. Einstein	https://www.cs.cmu.edu/~pattis/quotations.html
If you can't explain it simply, you don't understand it well enough. - A. Einstein	https://www.cs.cmu.edu/~pattis/quotations.html
Imagination is more important than knowledge. - A. Einstein	https://www.cs.cmu.edu/~pattis/quotations.html
Out of clutter, find simplicity. From discord, find harmony. In the middle of difficulty, lies opportunity. - A. Einstein	https://www.cs.cmu.edu/~pattis/quotations.html
Reinventing the wheel is a process. - R. Elisha	https://www.cs.cmu.edu/~pattis/quotations.html
To arrive at the simple is difficult. - R. Elisha	https://www.cs.cmu.edu/~pattis/quotations.html
Shall I tell you the secret of the true scholar? It is this: every man I meet is my master in some point, and in that I learn of him. - R.W. Emerson	https://www.cs.cmu.edu/~pattis/quotations.html
The proof of a high education is the ability to speak about complex matters as simply as possible. - R.W. Emerson	https://www.cs.cmu.edu/~pattis/quotations.html
The structure of a system reflects the structure of the organization that built it. - R. Fairley	https://www.cs.cmu.edu/~pattis/quotations.html
In those days [batch processing] programmers never even documented their programs, because it was assumed that nobody else would ever use them. Now, however, time-sharing had made exchanging software trivial: you just stored one copy in the public repository and therby effectively gave it to the world. Immediately people began to document their programs and to think of them as being usable by others. They started to build on each other's work. - R. Fano (in Waldrop, *The Dream Machine*, pp. 232)	https://www.cs.cmu.edu/~pattis/quotations.html
I can live with doubt and uncertainty. I think it's much more intersting to live not knowing than to have answers which might be wrong... In physics the truth is rarely perfectly clear, and that is certainly universally the case in human affairs. Hence, what is not surrounded by uncertaintly cannot be the truth. - R. Feynman (in *Perfectly Reasonable Deviations from the Beaten Track: The Letters of Richard P. Feynman*)	https://www.cs.cmu.edu/~pattis/quotations.html
If you're teaching a class, you can think about the elementary things that you know very well. These things are kind of fun and delightful. It doesn't do any harm to think them over again. Is there a better way to present them? The elementary things are easy to think about; if you can't think of a new thought, no harm done; what you thought about it before is good enough for the class. If you do think of something new, you're rather pleased that you have a new way of looking at it. The questions of the students are often the source of new research. They often ask profound questions that I've thought about at times and then given up on, so to speak, for a while. It wouldn't do me any harm to think about them again and see if I can go any further now. The students may not be able to see the thing I want to answer, or the subtleties I want to think about, but they remind me of a problem by asking questions in the neighborhood of that problem. It's not so easy to remind yourself of these things.  - R. Feynman (from *The Dignified Professor* in *Surely You're Joking Mr. Feynman: pg. 166)	https://www.cs.cmu.edu/~pattis/quotations.html
Precise language is not the problem. Clear language is the problem. - R. Feynman	https://www.cs.cmu.edu/~pattis/quotations.html
The inside of a computer is as dumb as hell but it goes like mad! - R. Feynman	https://www.cs.cmu.edu/~pattis/quotations.html
What I cannot create I do not understand. - R. Feynman	https://www.cs.cmu.edu/~pattis/quotations.html
When the problem [quantum chromodynamics] is finally solved, it will all be by imagination. Then there will be some big thing about the great way it was done. But it's simple -it will all be by imagination, and persistence. - R. Feynman (in Mlodinow's *Feynman's Rainbow*)	https://www.cs.cmu.edu/~pattis/quotations.html
When a Caltech student asked the eminent cosmologist Michael Turner what his *bias* was in favoring one or another particle as a likely candidate to compromise dark matter in the universe, Feynmann snapped, *Why do you want to know his bias? Form your own bias!* - R. Feynman (related by Timothy Ferris in *Perfectly Reasonable Deviations from the Beaten Track: The Letters of Richard P. Feynman*)	https://www.cs.cmu.edu/~pattis/quotations.html
There does not now, nor will there ever exist, a programming language in which it is the least bit hard to write bad programs. - L. Flon	https://www.cs.cmu.edu/~pattis/quotations.html
An engineer can do for a nickel what any damn fool can do for a dollar. - H. Ford	https://www.cs.cmu.edu/~pattis/quotations.html
Education's purpose is to replace an empty mind with an open one. - M. Forbes	https://www.cs.cmu.edu/~pattis/quotations.html
Any fool can write code that a computer can understand. Good programmers write code that humans can understand. - M. Fowler, *Refactoring: Improving the Design of Existing Code*	https://www.cs.cmu.edu/~pattis/quotations.html
[Describing JUnit] Never in the field of program testing, was so much owed by so many to so few lines of code. - M. Fowler (apologizing to Winston Churchill)	https://www.cs.cmu.edu/~pattis/quotations.html
Awaken people's curiosity. It is enough to open minds, do not overload them. Put there just a spark. - A. France	https://www.cs.cmu.edu/~pattis/quotations.html
Simplicity is the soul of efficiency. - A. Freeman (in The Eye of Osiris)	https://www.cs.cmu.edu/~pattis/quotations.html
When I am working on a problem, I never think about beauty. I think only of how to solve the problem. But when I have finished, if the solution is not beautiful, I know it is wrong. - B. Fuller	https://www.cs.cmu.edu/~pattis/quotations.html
The biggest difference between time and space is that you can't reuse time. - M. Furst	https://www.cs.cmu.edu/~pattis/quotations.html
Habitability is the characteristic of source code that enables programmers coming to the code later in its life to understand its construction and intentions and to change it comfortably and confidently... Software needs to be habitable because it always has to change...Programs are written and maintained, bugs are fixed, features are added, performance is tuned, and a whole variety of changes are made both by the original and new programming team members... What is important is that it be easy for programmers to come up to speed with the code, to be able to navigate through it effectively, to be able to understand what changes to make, and to be able to make them safely and correctly. - R. Gabriel (Patterns of Software, Oxford Press 1996)	https://www.cs.cmu.edu/~pattis/quotations.html
All truths are easy to understand once they are discovered; the point is to discover them. - G. Galilie	https://www.cs.cmu.edu/~pattis/quotations.html
A complex system that works in invariably found to have evolved from a simple system that worked. - J. Gall	https://www.cs.cmu.edu/~pattis/quotations.html
An excellent plumber is infinitely more admirable than an incompetent philosopher. The society that scorns excellence in plumbing because plumbing is a humble activity and tolerates shoddiness in philosophy because it is exalted activity will have neither good plumbing or good philosophy. Neither its pipes or its theories will hold water. - J. Gardner	https://www.cs.cmu.edu/~pattis/quotations.html
640K [of main memory] ought to be enough for anybody. - W. Gates (Founder and CEO Microsoft), 1981 - disclaimed	https://www.cs.cmu.edu/~pattis/quotations.html
A great lathe operator commands several times the wage of an average lathe operator, but a great writer of software code is worth 10,000 times the price of an average software writer. - W. Gates	https://www.cs.cmu.edu/~pattis/quotations.html
The best way to prepare [to be a programmer] is to write programs, and to study great programs that other people have written. In my case, I went to the garbage cans at the Computer Science Center and fished out listings of their operating systems. - W. Gates	https://www.cs.cmu.edu/~pattis/quotations.html
We flew down weekly to meet with IBM, but they thought the way to measure software was the amount of code we wrote, when really the better the software, the fewer lines of code. - W. Gates	https://www.cs.cmu.edu/~pattis/quotations.html
It is not knowledge, but the act of learning, not possession, but the act of getting there which generates the greatest satisfaction. - F. Gauss	https://www.cs.cmu.edu/~pattis/quotations.html
Beauty is more important in computing than anywhere else in technology because software is so complicated. Beauty is the ultimate defense against complexity. ... The geniuses of the computer field, on the the other hand, are the people with the keenest aesthetic senses, the ones who are capable of creating beauty. Beauty is decisive at every level: the most important interfaces, the most important programming languages, the winning algorithms are the beautiful ones. - D. Gelernter (*Machine Beauty*, Basic Books, 1998)	https://www.cs.cmu.edu/~pattis/quotations.html
Good programmers know what's beautiful and bad ones don't. - D. Gelernter (*Machine Beauty*, Basic Books, 1998)	https://www.cs.cmu.edu/~pattis/quotations.html
Object-oriented programming as it emerged in Simula 67 allows software structure to be based on real-world structures, and gives programmers a powerful way to simplify the design and construction of complex programs. - D. Gelernter (*Machine Beauty*, Basic Books, 1998)	https://www.cs.cmu.edu/~pattis/quotations.html
One of the principal objects of theoretical research in any department of knowledge is to find the point of view from which the subject appears in its greatest simplicity. - J. W. Gibbs	https://www.cs.cmu.edu/~pattis/quotations.html
Vague and nebulous is the beginning of all things, but not their end. - K. Gibran	https://www.cs.cmu.edu/~pattis/quotations.html
At the source of every error which is blamed on the computer, you will find at least two human errors, one of which is the error of blaming it on the computer. - T. Gilb (in *Laws of Unreliability*, Datamation March 1975)	https://www.cs.cmu.edu/~pattis/quotations.html
Indirection is the right direction. - A. Glew	https://www.cs.cmu.edu/~pattis/quotations.html
Never put off until run time what can be done at compile time. - A. Glew	https://www.cs.cmu.edu/~pattis/quotations.html
Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. - M. Golding	https://www.cs.cmu.edu/~pattis/quotations.html
This attitude [the abstract method in mathematics] can be encapsulated in the following slogan: a mathematical object is what it does. - T. Gowers (in *Mathematics: A Very Short Introduction pg. 18)	https://www.cs.cmu.edu/~pattis/quotations.html
A really good language should be both clean and dirty: cleanly designed, with a small core of well understood and highly orthogonal operators, but dirty in the sense that it lets hackers have their way with it....A real hacker's language will always have a slightly raffish character. - P. Graham (in *Hackers and Painters* pg. 204)	https://www.cs.cmu.edu/~pattis/quotations.html
Fixing fresh bugs is easier than fixing old ones. It's usaully fairly quick to find a bug in code you just wrote. When it turns up you often know what's wrong before you even look at the source, because you were already worrying about it subconsciously. Fixing a bug in something you wrote six months aga (the average case if you release once a year) is a lot more work. And since you don't understand the code as well, you're more likely to fix it in an ugly way, or even introduce more bugs. When you catch bugs early, you also get fewer compound bugs. Compound bugs are two separate bugs that interact: you trip going downstairs, and when you reach for the handrail it come off in your hand. In software this kind of bug is the hardest to find, and also tends to have the worst consequences. The traditional *break everything and then filter out the bugs* approach inherently yields a lot of compound bugs. And software released in a series of small chances inherently tends not to. The floors are constantly being swept clean of any loose objects that might later get stuck to something.  - P. Graham (in *Hackers and Painters* pg. 65-66)	https://www.cs.cmu.edu/~pattis/quotations.html
Great software, likewise, requires a fanatical devotion to beauty. If you look inside good software, you find that parts that no one is ever supposed to see are beautiful too. When it comes to code I behave in a way that would make me eligible for prescription drugs if I approached everyday life the same way. It drives me crazy to see code that's badly indented, or that uses ugly variable names. - P. Graham (in *Hackers and Painters* pg. 29)	https://www.cs.cmu.edu/~pattis/quotations.html
Imagine the kind of conversation you would have with someone so far away that there was a transmission delay of one minute. Now imagine speaking to someone in the next room. You wouldn't just have the same conversation faster, you would have a different kind of conversation. In Lisp, developing software is like speaking face-to-face. You can test code as you're writing it. And instant turnaround has just as dramatic an effect on development as it does on conversation. You don't just write the same program faster; you write a different kind of program. - P. Graham (in *On Lisp*)	https://www.cs.cmu.edu/~pattis/quotations.html
The difference between design and research seems to be a question of the good versus the new. Design doesn't have to be new, but it has to be good. Research doesn't have to be good, but it has to be new. I think these two paths converge at the top: the best design surpasses its predecessors by using new ideas, and the best research solves problems that are not only new, but worth solving. So ultimately design and research are aiming for the same destination, just approaching it from different directions. - P. Graham (in *Hackers and Painters* footnote 9, pg. 224)	https://www.cs.cmu.edu/~pattis/quotations.html
The way to make programs easy to read is not to stuff them with comments... A good programming language ought to be better for explaining software than English. You should only need comments when there is some kind of kludge you need to warn readers about, just as on a road there are only arrows on parts with unexpectedly sharp curves. - P. Graham (in *Hackers and Painters* footnote 9, pg. 224)	https://www.cs.cmu.edu/~pattis/quotations.html
Incidentally, when we're faced with a *prove or disprove,* we're usually better off trying first to disprove with a counterexample, for two reasons: A disproof is potentially easier (we need just one counterexample); and nitpicking arouses our creative juices. Even if the given assertion is true, our search for a counterexample often leads to a proof, as soon as we see why a counterexample is impossible. Besides, it's healthy to be skeptical. - R. Graham, D. Knuth and O. Patashnik (in *Concrete Mathematics: A Foundation for Computer Science*)	https://www.cs.cmu.edu/~pattis/quotations.html
Any sufficiently complicated C or Fortran program contains an ad hoc informally specified bug-ridden slow implementation of half of Lisp. - P. Greenspun	https://www.cs.cmu.edu/~pattis/quotations.html
UNIX was not designed to stop people from doing stupid things, because that would also stop them from doing clever things. - D. Gwyn	https://www.cs.cmu.edu/~pattis/quotations.html
Any performance problem can be solved by removing a level of indirection. (also see *Any programming problem...* by Anonymous). - M. Haertel	https://www.cs.cmu.edu/~pattis/quotations.html
The tendency to err that programmers have been noticed to share with other human beings has often been treated as though it were an awkwardness attendant upon programing's adolescence, which like acne would disappear with the craft's coming of age. It has proved otherwise. - M. Halpern	https://www.cs.cmu.edu/~pattis/quotations.html
The purpose of computing is insight, not numbers. - R. Hamming	https://www.cs.cmu.edu/~pattis/quotations.html
The mathematician's patterns, like those of the painter's or the poet's, the ideas, like the colours or words, must fit together in a harmonious way. There is no permanent place in this world for ugly mathematics. - G.H. Hardy (in *A Mathematician's Apology*)	https://www.cs.cmu.edu/~pattis/quotations.html
Programming is an explanatory activity. - R. Harper	https://www.cs.cmu.edu/~pattis/quotations.html
It is very interesting to me how quickly the class has divided up into three factions. One faction being the students who sit in the back of the class, given up sitting in their assigned seats, preparing the cases. What is it, only October? They've already given up trying -the cowards. The second group are the ones who won't raise their hands or volunteer an answer, but will try when they're called upon. That's where I am right now, living in a state of constant fear. And then there's the third echelon: the upper echelon; the volunteers. They raise their hands in class. They thrust themselves into the fray. I don't think they're smarter than anyone else, but they have courage. And, they'll achieve the final recognition, that teachers will get to know their names, and they'll get better grades. The past couple weeks I've been preparing to enter the upper echelon, and this weekend -if I can get all my work done- I'm going to enter it Monday morning, in Kingsfield's contract law class	https://www.cs.cmu.edu/~pattis/quotations.html
- James Hart (a law student in *The Paper Chase*)	https://www.cs.cmu.edu/~pattis/quotations.html
[Breaking into the *red* room in the Harvard law library, which contains the notes of Harvard professors from their school days, and drafts of their articles and books] Do you realize what this is? This is it. This is the unbroken chain. The ageless passing of wisdom. Hey [what is it?] listen to this. *Kingsfield, Charles W. notes on contract lawy in the course on contracts by Professor Williston at the Harvard Law School, 1927*. What the hell is it. They're just notes: and they look just like mine. Look [reading from Kingsfield's notes]. *Questions: Does everybody have a contract to obey everybody else's rights. What is a contract? What do you owe to others?* Look, there are even doodles. [C'mon, let's get outta here.] Wait, wait. *Can we make a contract with G-d that is biding to man? ... After all, I am almost the living extension of the old judges. Where would they be without me. I carry in my mind the cases they wrote. Where the hell woudl they be if it wasn't for me? Who would hang their pictures if there were no law students? It's hard being the living extension of tradition.* - James Hart (a law student in *The Paper Chase*)	https://www.cs.cmu.edu/~pattis/quotations.html
There are features that should not be used. There are concepts that should not be exploited. There are problems that should not be solved. There are programs that should not be written. - R. Harter	https://www.cs.cmu.edu/~pattis/quotations.html
PROBLEMS Problems worthy of attack prove their worth by hitting back. - P.Hein (in *Grooks*)	https://www.cs.cmu.edu/~pattis/quotations.html
THE ROAD TO WISDOM The road to wisdom? - Well, it's plai	https://www.cs.cmu.edu/~pattis/quotations.html
and simple to express: Err and err and err again but less and less and less. - P.Hein (in *Grooks*)	https://www.cs.cmu.edu/~pattis/quotations.html
The one who insists on never uttering an error must remain silent. - W. Heisenberg	https://www.cs.cmu.edu/~pattis/quotations.html
The speed of a non-working program is irrelevant. - S. Heller (in *Efficient C/C++ Programming*)	https://www.cs.cmu.edu/~pattis/quotations.html
Refactoring provides enough energy to a system for it to relax into a new and more comfortable state, a new local minimum. The effect of refactoring commonality is to tame the complexity of your system. - K. Henney (in Minimalism: The Imperial Clothing Crisis)	https://www.cs.cmu.edu/~pattis/quotations.html
A process cannot be understood by stopping it. Understanding must move with the flow of the process, must join and flow with it. - F. Herbert (The First Law of Mentat in *Dune*)	https://www.cs.cmu.edu/~pattis/quotations.html
It's [programming] the only job I can think of where I get to be both an engineer and an artist. There's an incredible, rigorous, technical element to it, which I like because you have to do very precise thinking. On the other hand, it has a wildly creative side where the boundaries of imagination are the only real limitation. - A. Hertzfeld (original Mac programmer)	https://www.cs.cmu.edu/~pattis/quotations.html
...At first I hoped that such a technically unsound project would collapse but I soon realized it was doomed to success. Almost anything in software can be implemented, sold, and even used given enough determination. There is nothing a mere scientist can say that will stand against the flood of a hundred million dollars. But there is one quality that cannot be purchased in this way -and that is reliability. The price of reliability is the pursuit of the utmost simplicity. It is a price which the very rich find most hard to pay. - C.A.R. Hoare	https://www.cs.cmu.edu/~pattis/quotations.html
I was eventually persuaded of the need to design programming notations so as to maximize the number of errors which cannot be made, or if made, can be reliably detected at compile time. - C.A.R. Hoare	https://www.cs.cmu.edu/~pattis/quotations.html
In the development of the understanding of complex phenomena, the most powerful tool available to the human intellect is abstraction. Abstraction arises from the recognition of similarities between certain objects, situations, or processes in the real world and the decision to concentrate on these similarities and to ignore, for the time being, their differences. - C.A.R. Hoare	https://www.cs.cmu.edu/~pattis/quotations.html
Inside every well-written large program is a well-written small program. - C.A.R. Hoare	https://www.cs.cmu.edu/~pattis/quotations.html
Premature optimization is the root of all evil in programming. - C.A.R. Hoare	https://www.cs.cmu.edu/~pattis/quotations.html
The unavoidable price of reliability is simplicity. - C.A.R. Hoare	https://www.cs.cmu.edu/~pattis/quotations.html
There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies. - C.A.R. Hoare	https://www.cs.cmu.edu/~pattis/quotations.html
What is the central core of the subject [computer science]? What is it that distinguishes it from the separate subjects with which it is related? What is the linking thread which gathers these disparate branches into a single discipline. My answer to these questions is simple -it is the art of programming a computer. It is the art of designing efficient and elegant methods of getting a computer to solve problems, theoretical or practical, small or large, simple or complex. It is the art of translating this design into an effective and accurate computer program. - C.A.R. Hoare	https://www.cs.cmu.edu/~pattis/quotations.html
You cannot teach beginners top-down programming, because they don't know which end is up. - C.A.R. Hoare	https://www.cs.cmu.edu/~pattis/quotations.html
All thought is a kind of computation. - D. Hobbes	https://www.cs.cmu.edu/~pattis/quotations.html
The problem is never how to get new, innovative thoughts into your mind, but how to get old ones out! - D. Hock (founder of VISA)	https://www.cs.cmu.edu/~pattis/quotations.html
Using a language we may create models of phenomena of interest, and by using models, phenomena may be studied for purposes of understanding or prediction. Models may be used for analysis focussed on a close examination of individual parts of the model and for synthesis aimed at understanding the interplay of the parts, that is, understanding the model as a whole. A novel is like a model of the real world expressed in a written languagee like English. In a novel, the characters may be analyzed and the interaction between people may be displayed and studied. (in *Dreams of Calculus: Perspectives on Mathematics Education*) - J. Hoffman, C. Johnson, A. Logg	https://www.cs.cmu.edu/~pattis/quotations.html
The ability to simplify means to eliminate the unnecessary so that the necessary may speak. - H. Hofmann (in *Introduction to the Bootstrap*)	https://www.cs.cmu.edu/~pattis/quotations.html
This sequence [of languages, SP/1 through SP/8] solves one of the perennial problems of introductory programming. As J.J. Horning once put it, the subject requires that everything must be taught first. - R. Holt, D. Wortman, D. Barnard and J. Cordy (quoting J.J. Horning) in *SP/k: A System for Teaching Computer Programming*, CACM 20/5 (May 77) pg. 303	https://www.cs.cmu.edu/~pattis/quotations.html
A ship in port is safe, but that is not what ships are built for. I want all the youngsters to sail out to sea and be good ships. - G. Hopper	https://www.cs.cmu.edu/~pattis/quotations.html
When you have a good idea and you've tried it and you know it's going to work, go ahead and do it -because it's much easier to apologize afterwards than it is to get permission. - G. Hopper	https://www.cs.cmu.edu/~pattis/quotations.html
Computer Science is the only discipline in which we view adding a new wing to a building as being maintenance. - J. Horning	https://www.cs.cmu.edu/~pattis/quotations.html
To treat programming scientifically, it must be possible to specify the required properties of programs precisely. Formality is certainly not an end in itself. The importance of formal specifications must ultimately rest in their utility -in whether or not they are used to improve the quality of software or to reduce the cost of producing and maintaining software. - J. Horning	https://www.cs.cmu.edu/~pattis/quotations.html
One purpose of CRC cards [a design tool] is to fail early, to fail often, and to fail inexpensively. It is a lot cheaper to tear up a bunch of cards that it would be to reorganize a large amount of source code. - C. Horstmann (in Object-Oriented Design with Java)	https://www.cs.cmu.edu/~pattis/quotations.html
We [teachers] make the road, others will make the journey. - V. Hugo	https://www.cs.cmu.edu/~pattis/quotations.html
The greatest mistake you can make is to be continually fearing you will make one. - E. Hubbard	https://www.cs.cmu.edu/~pattis/quotations.html
Rules of Optimization:   Rule 1: Don't do it.   Rule 2 (for experts only): Don't do it yet. - M. A. Jackson	https://www.cs.cmu.edu/~pattis/quotations.html
In the practical use of our intellect, forgetting is as important as remembering. - W. James	https://www.cs.cmu.edu/~pattis/quotations.html
That simplicity is the ultimate sophistication. What we meant by that was when you start looking at a problem and it seems really simple with all these simple solutions, you don't really understand the complexity of the problem. And your solutions are way too oversimplified, and they don't work. Then you get into the problem, and you see it's really complicated. And you come up with all these convoluted solutions. That's sort of the middle, and that's where most people stop, and the solutions tend to work for a while. But the really great person will keep on going and find, sort of, the key, underlying principle of the problem. And come up with a beautiful elegant solution that works. - S. Jobs (in *The Perfect Thing* by Steven Levy, pg. 67-68)	https://www.cs.cmu.edu/~pattis/quotations.html
The only problem with Microsoft is they just have no taste. They have absolutely no taste. What that means is -I don't mean that in a small way; I mean that in a big way- is the sense that they don't think of original ideas. They don't bring much culture into their product. ... So I guess I am saddened not by Microsoft's success -I have no problem with their success; they've earned their success (for the most part). I have a problem with the fact that the just make really third-rate products	https://www.cs.cmu.edu/~pattis/quotations.html
- S. Jobs (transcribed from *Triumph of the Nerds*)	https://www.cs.cmu.edu/~pattis/quotations.html
Before software can be reusable it first has to be usable. - R. Johnson	https://www.cs.cmu.edu/~pattis/quotations.html
The fastest algorithm can frequently be replaced by one that is almost as fast and much easier to understand. - D. Jones	https://www.cs.cmu.edu/~pattis/quotations.html
To teach is to learn twice. - J. Joubert	https://www.cs.cmu.edu/~pattis/quotations.html
The honest truth is that having a lot of people staring at the code does not find the really nasty bugs. The really nasty bugs are found by a couple of really smart people who just kill themselves. (also see *Given enough eyeballs...* by E. Raymond). - B. Joy	https://www.cs.cmu.edu/~pattis/quotations.html
We don't manage our time as well as we manage our space. There's an overhead of starting and an overhead of stopping a project because you kind of lose your momentum. And you've got to bracket and put aside all the things you're already doing. So you need reasonably large blocks of uninterrupted time if you're going to be successful at doing some of these things. That's why hackers tend to stay up late. If you stay up late and you have another hour of work to do, you can just stay up another hour later without running into a wall and having to stop. Whereas it might take three or four hours if you start over, you might finish if you just work that extra hour. If you're a morning person, the day always intrudes a fixed amount of time in the future. So it's much less efficient. Which is why I think computer people tend to be night people -because a machine doesn't get sleepy.  - B. Joy	https://www.cs.cmu.edu/~pattis/quotations.html
In the particular is contained the universal. - J. Joyce	https://www.cs.cmu.edu/~pattis/quotations.html
Mistakes are the portals of discovery. - J. Joyce	https://www.cs.cmu.edu/~pattis/quotations.html
90% of code written today is getting around other people's mistakes. - A. Kay	https://www.cs.cmu.edu/~pattis/quotations.html
Computers are to computing as instruments are to music. Software is the score whose interpretations amplifies our reach and lifts our spirits. Leonardo da Vinci called music the shaping of the invisible, and his phrase is even more apt as a description of software. - A. Kay	https://www.cs.cmu.edu/~pattis/quotations.html
[In a programming language] Simple things should be simple and complex things should be possible. - A. Kay	https://www.cs.cmu.edu/~pattis/quotations.html
The best way to predict the future is to invent it. - A. Kay	https://www.cs.cmu.edu/~pattis/quotations.html
Until real software engineering is developed, the next best practice is to develop with a dynamic system that has extreme late binding in all aspects. - A. Kay	https://www.cs.cmu.edu/~pattis/quotations.html
When you can measure what you are speaking about, and express it in numbers, you know something about it; but when you cannot measure it, when you cannot express it in numbers, your knowled is of a meager and unsatisfactory kind. - Lord Kelvin	https://www.cs.cmu.edu/~pattis/quotations.html
Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration. - S. Kelly-Bootle	https://www.cs.cmu.edu/~pattis/quotations.html
If you have a large number of unrelated ideas, you have to get quite a distance away from them to get a view of all of them, and this is the role of abstraction. If you look at each too closely you see too many details. If you get far away things may appear simpler because you can only see the large, broad outlines; you do not get lost in petty details. - J. Kemeny (co-creator of the BASIC programming language)	https://www.cs.cmu.edu/~pattis/quotations.html
Act in haste and repent at leisure; code too soon and debug forever. - R. Kennington	https://www.cs.cmu.edu/~pattis/quotations.html
Controlling complexity is the essence of computer programming. - B. Kernighan	https://www.cs.cmu.edu/~pattis/quotations.html
Everyone knows that debugging is twice as hard as writing a program in the first place. So if you are as clever as you can be when you write it, how will you ever debug it? - B. Kernighan	https://www.cs.cmu.edu/~pattis/quotations.html
Another effective [debugging] technique is to explain your code to someone else. This will often cause you to explain the bug to yourself. Sometimes it takes no more than a few sentences, followed by an embarrassed *Never mind, I see what's wrong. Sorry to bother you.* This works remarkably well; you can even use non-programmers as listeners. One university computer center kept a teddy bear near the help desk. Students with mysterious bugs were required to explain them to the bear before they could speak to a human counselor. - B. Kernighan & D. Pike (in *The Practice of Programming* pp. 123)	https://www.cs.cmu.edu/~pattis/quotations.html
The only way to learn a new programming language is by writing programs in it. - B. Kernighan & D. Ritchie	https://www.cs.cmu.edu/~pattis/quotations.html
The study of law is something new and unfamiliar to most of you -unlike any schooling you have ever been through before. We use the Socratic method here: I call on you, ask you a question, and you answer it. Why don't I just give you a lecture? Because through my questions you learn to teach yourselves. Through this method of questioning-answering, questioning-answering, we seek to develop in you the ability to analyze that vast complex of facts that constitute the relationships of members within a given society. Questioning and answering. At times, you may feel that you have found the correct answer. I assure you that this is a total delusion on your part. You will never find the correct, absolute, and final answer. In my classroom, there is always another question, another question to follow your answer. Yes, you are on a treadmill. My little questions spin the tumblers of your mind. You are on an operating table; my little questions are the fingers probing your brain. We do brain surgery here. You teach yourselves the law, but I train your mind. You come in here with a skull full of mush, and you leave thinking like a lawyer. - Professor Kingsfield (addressing 1st year Harvard Law Students in *The Paper Chase*)	https://www.cs.cmu.edu/~pattis/quotations.html
A charlatan makes obscure what is clear; a thinker makes clear what is obscure. - H. Kingsmill	https://www.cs.cmu.edu/~pattis/quotations.html
Beware of bugs in the above code; I have only proved it correct, not tried it. - D. Knuth	https://www.cs.cmu.edu/~pattis/quotations.html
Computers are good at following instructions, but not at reading your mind. - D. Knuth (Tex, pg. 9)	https://www.cs.cmu.edu/~pattis/quotations.html
Debugging is an art that needs much further study .... The most effective debugging techniques seem to be those which are designed and built into the program itself -many of today's best programmers will devote nearly half of their programs to facilitating the debugging process on the other half; the first half... will eventually be thrown away, but the net result is a surprising gain in productivity. Another good debugging practice is to keep a record of every mistake that is made. Even though this will probably be quite embarrassing, such information is invaluable to anyone doing research on the debugging problem, and it will also help you learn how to reduce the number of future errors.  - D. Knuth (The Art of Computer Programming, Volume 1)	https://www.cs.cmu.edu/~pattis/quotations.html
Let us change our traditional attitude to the construction of programs. Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do. - D. Knuth	https://www.cs.cmu.edu/~pattis/quotations.html
...methods are more important than facts. The educational value of a problem given to a student depends mostly on how often the thought processes that are invoked to solve it will be helpful in later situations. It has little to do with how useful the answer to the problem may be. On the other hand, a good problem must also motivate the students; they should be interested in seeing the answer. Since students differ so greatly, I cannot expect everyone to like the problems that please me. - D. Knuth (in *Are Toy Problems Useful*, Chapter 10 of *Selected Papers on Computer Science*, pg. 176)	https://www.cs.cmu.edu/~pattis/quotations.html
...methods are more important than facts. The educational value of a problem given to a student depends mostly on how often the thought processes that are invoked to solve it will be helpful in later situations. It has little to do with how useful the answer to the problem may be. On the other hand, a good problem must also motivate the students; they should be interested in seeing the answer. Since students differ so greatly, I cannot expect everyone to like the problems that please me. - D. Knuth (in *Are Toy Problems Useful*, Chapter 10 of *Selected Papers on Computer Science*, pg. 176)	https://www.cs.cmu.edu/~pattis/quotations.html
...One of the most important lessons, perhaps, is the fact that SOFTWARE IS HARD. From now on I shall have significantly greater respect for every successful software tool that I encounter. During the past decade I was surprised to learn that the writing of programs for TeX and Metafont proved to be much more difficult than all the other things I had done (like proving theorems or writing books). The creation of good software demand a significiantly higher standard of accuracy than those other things do, and it requires a longer attention span than other intellectual tasks. - D. Knuth (in *Selected Papers on Computer Science*, pp 161)	https://www.cs.cmu.edu/~pattis/quotations.html
We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. - D. Knuth	https://www.cs.cmu.edu/~pattis/quotations.html
When I speak about computer programming as an art, I am thinking primarily of it as an art form, in an aesthetic sense. The chief goal of my work as an educator and author is to help people learn how to write beautiful programs...My feeling is that when we prepare a program, the experience can be just like composing poetry or music...Some programs are elegant, some are exquisite, some are sparkling. My claim is that it is possible to write grand programs, noble programs, truly magnificent ones!...computer programming is an art, because it applies accumulated knowledge to the world, because it requires skill and ingenuity, and especially because it produces objects of beauty. Programmers who subconsciously view themselves as artists will enjoy what they do and will do it better. - D. Knuth (Computer Programming as an Art. Turing Award Speech 1974)	https://www.cs.cmu.edu/~pattis/quotations.html
When certain concepts of TeX are introduced informally, general rules will be stated; afterwards you will find that the rules aren't strictly true. In general, the later chapters contain more reliable information than the earlier ones do. The author feels that this technique of deliberate lying will actually make it easier for you to learn the ideas. Once you understand a simple but false rule, it will not be hard to supplement that rule with its exceptions. - D. Knuth (Tex, pg. vi)	https://www.cs.cmu.edu/~pattis/quotations.html
If we really understand the problem, the answer will come out of it, because the answer is not separate from the problem. - J. Krishnamurti	https://www.cs.cmu.edu/~pattis/quotations.html
Any sufficiently advanced bug is indistiguishable from a feature. - R. Kulawiec	https://www.cs.cmu.edu/~pattis/quotations.html
There is a race between the increasing complexity of the systems we build and our ability to develop intellectual tools for understanding their complexity. If the race is won by our tools, then systems will eventually become easier to use and more reliable. If not, they will continue to become harder to use and less reliable for all but a relatively small set of common tasks. Given how hard thinking is, if those intellectual tools are to succeed, they will have to substitute calculation for thought. - L. Lamport	https://www.cs.cmu.edu/~pattis/quotations.html
*Where have you performed?* Murray asked me from behind a copy of Variety. *Well, I don't perform, exactly,* I answered, *but I have spoken at synagogues, and I lecture from time to time at colleges and universities.* *Universities?* Murray sputtered. *Did he say universities? Worst audience in the world. I spoke at a university once. They invited me to speak about the hotel industry. Believe me, I've got a pretty good routine on this; I've used it many times before, and I know where I'm supposed to get reactions: chuckles, laughs, applause. Son of a bitch, I stand up there and it's a grim audience! All these young people in jeans and sneakers. I open it up for questions. These bastards are dead serious -they're taking notes! I realized later, they weren't an audience, they were students. They take notes and get grades. They're not there to laugh. Who wants to perform for an audience like that?*  - A. Lansky, relating his experiences lecturing at resorts in the Catskills while raising money for the National Yiddish Book Center (described in his book, *Outwitting History*)	https://www.cs.cmu.edu/~pattis/quotations.html
We think only through the medium of words. Languages are true analytical methods. Algebra, which is adapted to its purpose in every species of expression, in the most simple, most exact, and best manner possible, is at the same time a language and an analytical method. The art of reasoning is nothing more than a language well arranged. - A. Lavoisier	https://www.cs.cmu.edu/~pattis/quotations.html
We don't have much time, so we don't teach them; we acquaint them with things that they can learn. - C. Leiserson (on *The Undergraduate Practicum* at MIT, from a talk at CMU)	https://www.cs.cmu.edu/~pattis/quotations.html
Learning is never done without errors and defeat. - V. Lenin	https://www.cs.cmu.edu/~pattis/quotations.html
If you want truly to understand something, try to change it. - K. Lewin	https://www.cs.cmu.edu/~pattis/quotations.html
A vivid confirmation of this analysis [the importance of extra-curricular activities] occurred during a lunchtime conversation I had with three computer science graduates of the classes of 1994/1995 who started a company together and sold it in 1998 for more than $250 million. Over sandwiches I asked them what part of their computer science education had been most important to the success of their software enterprise. After a moment of tight smiles and awkward silence, one of the young graduates spoke up. *The computer science courses I took were really terrific,* he said in an attempt to reassure me, *but I didn't learn much that I could not have learned on my own. The most important things I learned were from managing the Quincy House Grill.* It made perfect sense -hiring, firing, and inspiring colleagues, working under pressure in close quarters- all were very much the same in the cheeseburger-flipping business he had run at Harvard as in the software business the three had started in a tiny apartment	https://www.cs.cmu.edu/~pattis/quotations.html
- H. Lewis (in *Excellence Without Soul*, pg. 88)	https://www.cs.cmu.edu/~pattis/quotations.html
...fielding statistics made sense only as numbers, not as language. Language, not numbers, is what interested him [Bill James, a baseball writer]. Words, and the meaning they were designed to convey. *When the numbers acquire the significance of the language,* he later wrote, *they acquire the power to do all the things which language can do: to become fiction and drama and poetry.* - M. Lewis (in Moneyball: The Art of Winning an Unfair Game, page 67)	https://www.cs.cmu.edu/~pattis/quotations.html
Complexity is a sign of technical immaturity. Simplicity of use is the real sign of a well design product whether it is an ATM or a Patriot missile. - D. Ling	https://www.cs.cmu.edu/~pattis/quotations.html
Composing computer programs to solve scientific problems is like writing poetry. You must choose every word with care and link it with the other words in perfect syntax. There is no place for verbosity or carelessness. To become fluent in a computer lnaguage demands almost the antithesis of modern loose thinking. It requires many interactive sessions, the hands-on use of the device. You do not learn a foreign language from a book, rather you have to live in the country for year to let the langauge become an automatic part of you, and the same is true for computer languages. - James Lovelock (Originator of the Gaia Theory)	https://www.cs.cmu.edu/~pattis/quotations.html
In the beginning we must simplify the subject, thus unavoidably falsifying it, and later we must sophisticate away the falsely simple beginning. - M. Maimonides	https://www.cs.cmu.edu/~pattis/quotations.html
Development is maintenance. - B. Marick	https://www.cs.cmu.edu/~pattis/quotations.html
A teacher's job is to take a bunch of live wires and see that they are well-grounded. - D. Martin	https://www.cs.cmu.edu/~pattis/quotations.html
If our designs are failing due to the constant rain of changing requirements, it is our designs that are at fault. We must somehow find a way to make our designs resilient to such changes and protect them from rotting. - R. Martin	https://www.cs.cmu.edu/~pattis/quotations.html
If the only tool you have is a hammer, you tend to see every problem as a nail. - A. Maslow	https://www.cs.cmu.edu/~pattis/quotations.html
Any clod can have the facts; having opinions is an art. - C. McCabe	https://www.cs.cmu.edu/~pattis/quotations.html
Good code is its own best documentation. As you're about to add a comment, ask yourself, *How can I improve the code so that this comment isn't needed?* Improve the code and then document it to make it even clearer. - S. McConnell	https://www.cs.cmu.edu/~pattis/quotations.html
It's hard enough to find an error in your code when you're looking for it; it's even harder when you've assumed your code is error-free. - S. McConnell	https://www.cs.cmu.edu/~pattis/quotations.html
It's OK to figure out murder mysteries, but you shouldn't need to figure out code. You should be able to read it. - S. McConnell	https://www.cs.cmu.edu/~pattis/quotations.html
Testing by itself does not improve software quality. Test results are an indicator of quality, but in and of themselves, they don't improve it. Trying to improve software quality by increasing the amount of testing is like try to lose weight by weighing yourself more often. What you eat before you step onto the scale determines how much you will weigh, and the software development techniques you use determine how many errors testing will find. If you want to lose weight, don't buy a new scale; change your diet. If you want to improve your software, don't test more; develop better. - S. McConnell	https://www.cs.cmu.edu/~pattis/quotations.html
Formal methods will never have a significant impact until they can be used by people who don't understand them. - T. Melham	https://www.cs.cmu.edu/~pattis/quotations.html
Programming is similar to a game of golf. The point is not getting the ball in the hole but how many strokes it takes. - H. Mills	https://www.cs.cmu.edu/~pattis/quotations.html
The only way for errors to occur in a program is by being put there by the author. No other mechanisms are known. Programs can't acquire bugs by sitting around with other buggy programs. Right practice aims at preventing insertion of errors and, failing that, removing them before testing or any other running of the program. - H. Mills	https://www.cs.cmu.edu/~pattis/quotations.html
Making the simple complicated is commonplace; making the complicated simple, awesomely simple, that's creativity. - C. Mingus	https://www.cs.cmu.edu/~pattis/quotations.html
A computer is like a violin. You can imagine a novice trying first a phonograph and then a violin. The latter, he says, sounds terrible. That is the argument we have heard from our humanists and most of our computer scientists. Computer programs are good, they say, for particular purposes, but they aren't flexible. Neither is a violin, or a typewriter, until you learn how to use it. - M. Minsky (in *Why Programming Is a Good Medium for Expressing Poorly-Understood and Sloppily-Formulated Ideas*)	https://www.cs.cmu.edu/~pattis/quotations.html
Language designers are not intellectuals. They're not as interested in thinking as you might hope. They just want to get a language done and start using it. - D. Moon	https://www.cs.cmu.edu/~pattis/quotations.html
He who hasn't hacked assembly langauge as a youth has no heart. He who does so as an adult has no brain. - J Moore	https://www.cs.cmu.edu/~pattis/quotations.html
Computer science is to biology what calculus is to physics. It's the natural mathematical technique that best maps the character of the subject. - H. Morowitz	https://www.cs.cmu.edu/~pattis/quotations.html
A little inaccuracy sometimes saves tons of explanation. - H.H. Munro	https://www.cs.cmu.edu/~pattis/quotations.html
You have to honor failure, because failure is just the negative space around success. - R. Nelson (in Wired 06/2004 page 166)	https://www.cs.cmu.edu/~pattis/quotations.html
Computing is not about computers any more. It is about living. - N. Negroponte	https://www.cs.cmu.edu/~pattis/quotations.html
Between 1892 say, and 1904, movies were made by the cameraman because he understood the equipment. And that is exactly where we are now [in software design]. In 1904 they invented the director; what was the director? It was the guy who didn't have to know how to load the camera didn't have to know how to sew costumes, play a violin, dance, fence, or hang the lights. But, he had to know how to make those effects come together in a unified experience... Why are video games so much better designed than office software? Videogames are designed by people who love to play video games. Office software is designed by people who want to do something else on the weekend... What does showbusiness teach you. It teaches you that design is war; it is a power struggle between the producers, directors, authors, everyone who wants to be involved. - T. Nelson (transcribed from a talk at Engelbart's Unfinished Revolution a Stanford University Symposium)	https://www.cs.cmu.edu/~pattis/quotations.html
In mathematics you don't understand things. You just get used to them. - J. von Neumann	https://www.cs.cmu.edu/~pattis/quotations.html
Millions for compilers, but hardly a penny for understanding human programming language use. Now, programming languages are obviously symmetrical, the computer on one side, the human on the other. In an appropriate science of computer languages, one would expect that half the effort would be on the computer side, understanding how to translate the languages into executable form, and half on the human side, understanding how to design languages that are easy or productive to use. Yet, we do not even have an enumeration of all the psychologicial functions programing languages serve for the user. Of course, there is lots of programming language design, but it comes from computer scientists. And though technical papers on languages contain main appeals to ease of use and learning, they patently contain almost no psychologicial evidence nor any appeal to psychological science. - A. Newell and S. Card	https://www.cs.cmu.edu/~pattis/quotations.html
There is no reason anyone would want a computer in their home. - K. Olsen (Founder and President, Digital Equipment Corporation), 1977	https://www.cs.cmu.edu/~pattis/quotations.html
The best performance improvement is the transition from the nonworking state to the working state - J. Osterhout	https://www.cs.cmu.edu/~pattis/quotations.html
Complexity kills. It sucks the life out of developers, it makes products difficult to plan, build and test, it introduces security challenges and it causes end-user and administrator frustration. ...[we should] explore and embrace techniques to reduce complexity. - R. Ozzie	https://www.cs.cmu.edu/~pattis/quotations.html
As a rule, software systems do not work well until they have been used, and have failed repeatedly, in real applications. - D. Parnas	https://www.cs.cmu.edu/~pattis/quotations.html
A programming language is like a natural, human language in that it favors certain methaphors, images, and ways of thinking. - S. Papert (in *Mindstorms: Children, Computers, and Powerfule Ideas*, 1980)	https://www.cs.cmu.edu/~pattis/quotations.html
My basic idea is that programming is the most powerful medium of developing the sophisticated and rigorous thinking needed for mathematics, for grammar, for physics, for statistics, for all the *hard* subjects.... In short, I believe more than ever that programming should be a key part of the intellectual development of people growing up. - S. Papert (in *CACM January 2005 (Vol 24, #1, pp38)*)	https://www.cs.cmu.edu/~pattis/quotations.html
I have made this letter longer than usual, only because I have not had the time to make it shorter. - B. Pascal	https://www.cs.cmu.edu/~pattis/quotations.html
Chance favors the prepared mind. - L. Pasteur	https://www.cs.cmu.edu/~pattis/quotations.html
A class, in Java, is where we teach objects how to behave. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
Code should run as fast as necessary, but no faster; something important is always traded away to increase speed. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
He who runs an av-rage pace, runs alone throughout the race. [I know I'm teaching at the right pace when I please no one: half the students say I'm going too slow, half too fast.] - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
If you cannot grok the overall structure of a program while taking a shower [e.g., with no external memory aids], you are not ready to code it. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
Programming languages, like pizzas, come in only too sizes; too big and too small. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
The discipline of programming is most like sorcery. Both use precise language to instruct inanimate objects to do our bidding. Small mistakes in programs or spells can lead to completely unforseen behavior: e.g., see the story, *The Sorcerer's Apprentice*. Neither study is easy: *...her [Galinda's] early appetite for sorcery had waned once she'd heard what a grind it was to learn spells and, worse, to understand them.* from the book *Wicked* by G. Maguire. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
The purpose of brakes on a car is to allow you to go fast. Although the gas pedal makes you go fast, the brake pedal allows you to drive safely while going fast. The purpose of a strict compiler (one that performs type checking, uninitialized variable checking, reachability analysis, etc.) is to allow you to program fast. Programmers -like all humans- have limited intellects: when they focus on one aspect of a program, they must ignore others. Focusing on the right aspect at the right time is critical. By understanding those aspects that the compiler can check, you can ignore them, and focus on more important ones. Some programmers think that such an approach is reckless; they believe that you must pay close attention to everything at once. They are right -for them; but I'm just not that smart, so I must use my tools more effectively - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
The structure of a software system provides the ecology in which code is born, matures, and dies. A well-designed habitat allows for the successful evolution of all the components needed in a software system. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
The three most important aspects of debugging and real estate are the same: Location, Location, and Location. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
There is a famous rule in performance optimization called the 90/10 rule: 90% of a program's execution time is spent in only 10% of its code. The standard inference from this rule is that programmers should find that 10% of the code and optimize it, because that's the only code where improvements make a difference in the overall system performance. But a second inference is just as important: programmers can deoptimize the other 90% of the code (in order to make it easier to use, maintain, etc.), because deterioration (of performance) of that code won't make much of a difference in the overall system performance. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
When debugging, novices insert corrective code; experts remove defective code. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
When teaching a rapidly changing technology, perspective is more important than content. - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
When building a complex system, having crackerjack programmers (who can make any design work, even a bad one) can be a liability. The result, after lots of effort, is a working system that cannot be easily maintained or upgraded. Good -but not great- programmers would fail early, causing a realization that the system must be redesigned, and then reimplemented. The extra cost is paid once, early in the system's cycle (when it is cheap), instead of repeatedly paid late in the system's cycle (when it is more expensive) - R. Pattis	https://www.cs.cmu.edu/~pattis/quotations.html
Don't tell people how to do things. Tell them what to do and let them surprise you with their results. - G. Patton	https://www.cs.cmu.edu/~pattis/quotations.html
The best way to get a good idea is to get a lot of ideas. - L. Pauling	https://www.cs.cmu.edu/~pattis/quotations.html
A good programming language is a conceptual universe for thinking about programming. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
A language that doesn't affect the way you think about programming is not worth knowing. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
Any noun can be verbed. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
Fools ignore complexity; pragmatists suffer it; experts avoid it; geniuses remove it. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
I think it is inevitable that people program poorly. Training will not substantially help matters. We have to learn to live with it. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
I think that it's extraordinarily important that we in computer science keep fun in computing. When it started out, it was an awful lot of fun. Of course, the paying customers got shafted every now and then, and after a while we began to take their complaints seriously. We began to feel as if we really were responsible for the successful, error-free perfect use of these machines. I don't think we are. I think we're responsible for stretching them, setting them off in new directions, and keeping fun in the house. I hope the field of computer science never loses its sense of fun. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
It goes against the grain of modern education to teach students to program. What fun is there to making plans, acquiring discipline, organizing thoughts, devoting attention to detail, and learning to be self critical. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
It is easier to write an incorrect program than understand a correct one. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
Optimization hinders evolution. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
Simplicity does not precede complexity, but follows it. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
There are two ways to write error-free programs, but only the third one works. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
To understand a program, you must become both the machine and the program. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
You think you KNOW when you learn, are more sure when you can write, even more when you can teach, but certain when you can program. - A. Perlis	https://www.cs.cmu.edu/~pattis/quotations.html
Computers are useless. They only give you answers. - P. Picasso	https://www.cs.cmu.edu/~pattis/quotations.html
I am always doing that which I cannot do, in order that I may learn how to do it. - P. Picasso	https://www.cs.cmu.edu/~pattis/quotations.html
Fancy algorithms are slow when N is small, and N is usually small. - R. Pike	https://www.cs.cmu.edu/~pattis/quotations.html
Fancy optimizers have fancy bugs. - R. Pike	https://www.cs.cmu.edu/~pattis/quotations.html
Thinking and spoken discourse are the same thing, except that what we call thinking is, precisely, the inward dialogue carried on by the mind with itself without spoken sound. - Plato	https://www.cs.cmu.edu/~pattis/quotations.html
The mind is not a vessel to be filled, but a fire to be ignited. - Plutarch (See W.B. Yeats: Education...)	https://www.cs.cmu.edu/~pattis/quotations.html
Life is good only for two things: to study mathematics and to teach it. - M. Poisson	https://www.cs.cmu.edu/~pattis/quotations.html
Computers in the future may weigh no more than 1.5 tons. - Popular Science (1959)	https://www.cs.cmu.edu/~pattis/quotations.html
Knowledge of a subject means knowledge of the language of that subject, which includes not only what its words mean, but far more important, how its words mean. As one learns the language of a subject, one is also learning what the subject is. It cannot be said often enough that what we call a subject consists mostly, if not entirely, of its language. If you eliminate all the words of a subject, you have eliminated the subject. Biology is not plants and animals. It is language about plants and animals. History is not events. It is language describing and interpreting events. Astronomy is not planets and stars. It is a way of talking about planets and stars. - N. Postman	https://www.cs.cmu.edu/~pattis/quotations.html
Gates has always understood Moore's Law better than anyone else in the industry. If you can make something run at all, get it out there -it may be slow and clunky, but hardware improvements will bail you out. If you wait until it's running perfectly on the hardware already in the field, it will be obsolete before it's released. This philosophy built Microsoft and is the main reason Microsoft won the war IBM declared back in the OS/2 days. - J. Pournelle (Dr. Dobbs Journal, Feb. 2004, pp. 89)	https://www.cs.cmu.edu/~pattis/quotations.html
The voyage of discovery is not in seeking new landscapes but in having new eyes. - M. Proust	https://www.cs.cmu.edu/~pattis/quotations.html
I really hate this darn machine;     I wish that they would sell it. It won't do what I want it to,     but only what I tell it. - Programmer's Lament	https://www.cs.cmu.edu/~pattis/quotations.html
Given enough eyeballs, all bugs are shallow (e.g., given a large enough beta-tester and co-developer base, almost every problem will be characterized quickly and the fix obvious to someone). (also see *The honest truth...* by B. Joy). - E. Raymond (Lesson 8 in The Cathedral and the Bazaar)	https://www.cs.cmu.edu/~pattis/quotations.html
Good programmers know what to write. Great ones know what to use. [I'd add: Exceptional programmers know how to write code that others can use. -REP] - E. Raymond	https://www.cs.cmu.edu/~pattis/quotations.html
Ugly programs are like ugly suspension bridges: they're much more liable to collapse than pretty ones, because the way humans (especially engineer-humans) perceive beauty is intimately related to our ability to process and understand complexity. A language that makes it hard to write elegant code makes it hard to write good code. - E. Raymond	https://www.cs.cmu.edu/~pattis/quotations.html
Computer Science is the first engineering discipline in which the complexity of the objects created is limited solely by the skill of the creator, and not by the strength of raw materials. - B. Reid	https://www.cs.cmu.edu/~pattis/quotations.html
All of us had been trained by Kelly Johnson [designer of the Lockheed SR-71] and believed fanatically in his insistence that an airplane that looked beautiful would fly the same way. - B. Rich (in *Skunk Works*)	https://www.cs.cmu.edu/~pattis/quotations.html
In time of profound change, the learners inherit the earth, while the learned find themselves beautifully equipped to deal with a world that no longer exists. - A. Rogers	https://www.cs.cmu.edu/~pattis/quotations.html
God is in the details. - M. van der Rohe	https://www.cs.cmu.edu/~pattis/quotations.html
Less is more. - M. van der Rohe	https://www.cs.cmu.edu/~pattis/quotations.html
Software is abstract and therefore seems as if it should be infinitely malleable. And yet, for all its ethereal flexibility, it can be stubbornly, maddeneningly intractable, and it is constantly surprising us with his rigidity. - S. Rosenberg (in *Dreaming in Code*, pp 58)	https://www.cs.cmu.edu/~pattis/quotations.html
Don't you hate code that's not properly indented? Making it [indenting] part of the syntax guarantees that all code is properly indented. - G. van Rossum(designer of the Python)	https://www.cs.cmu.edu/~pattis/quotations.html
The highest reward for a person's toil is not what they get for it, but what they become by it. - J. Ruskin	https://www.cs.cmu.edu/~pattis/quotations.html
Language serves not only to express thought but to make possible thoughts which could not exist without it. - B. Russell	https://www.cs.cmu.edu/~pattis/quotations.html
A designer knows he's achieved perfection not when there is nothing left to add, but when there is nothing left to take away. - A. de Saint-Exupery	https://www.cs.cmu.edu/~pattis/quotations.html
If you want to build a ship, don't drum up the men to gather wood, divide the work and give orders. Instead, teach them to yearn for the vast and endless sea. - A. de Saint-Exupery	https://www.cs.cmu.edu/~pattis/quotations.html
Questions are the important thing, answers are less important. Learning to ask a good question is the heart of intelligence. Learning the answer---well, answers are for students. Questions are for thinkers. - R. Schank (in *The Connosseur's Guide to the Mind*)	https://www.cs.cmu.edu/~pattis/quotations.html
There is one very good reason to learn programming, but it has nothing to do with preparing for high-tech careers or with making sure one is computer literate in order to avoid being cynically manipulated by the computers of the future. The real value of learning to program can only be understood if we look at learning to program as an exercise of the intellect, as a kind of modern-day Latin that we learn to sharpen our minds. - R. Schank (in *The Cognitive Computer)	https://www.cs.cmu.edu/~pattis/quotations.html
Always do the hard part first. If the hard part is impossible, why waste time on the easy part? Once the hard part is done, you're home free. Always do the easy part first. What you think at first is the easy part often turns out to be the hard part. Once the easy part is done, you can concentrate all your efforts on the hard part.  - A. Schapira	https://www.cs.cmu.edu/~pattis/quotations.html
The skill of writing is to create a context in which other people can think. - E. Schlossberg	https://www.cs.cmu.edu/~pattis/quotations.html
Machines are simple: a hammer, a door hinge, a steak knife. Systems are much more complicated; they have components, feedback loops, mean times between failure, infrastructure. Digital systems are daedal; even a simple computer program has hundreds of thousands of lines of computer code doing all sorts of different things. A complex computer program has thousands of components, each of which has to work by itself and in interaction with all the other components. This is why object-oriented programming was developed: to deal with the complexity of digital systems...systems have bugs. A bug is a particular kind of failure...It's different from a malfunction. When something malfunctions, it no longer works properly. When something has a bug, it misbehaves in a particular way, possibly unrepeatable, and possibly unexplainable. Bugs are unique to systems. Machines can break, or fail, or not work, but only a system can have a bug. - B. Schneier (in Secrets & Lies: Digital Security in a Networked World).	https://www.cs.cmu.edu/~pattis/quotations.html
Microsoft knows that reliable software is not cost effective. According to studies, 90% to 95% of all bugs are harmless. They're never discovered by users, and they don't affect performance. It's much cheaper to release buggy software and fix the 5% to 10% of bugs people find and complain about. - B. Schneier	https://www.cs.cmu.edu/~pattis/quotations.html
If the code and the comments disagree, then both are probably wrong. - N. Schryer	https://www.cs.cmu.edu/~pattis/quotations.html
Always to see the general in the particular is the very foundation of genius. - A. Schopenhauer	https://www.cs.cmu.edu/~pattis/quotations.html
Thus the task is not so much to see what no one has yet seen, but to think what no one has yet throught about that which everybody sees. - E. Schrodinger	https://www.cs.cmu.edu/~pattis/quotations.html
Data is not information, Information is not knowledge, Knowledge is not understanding, Understanding is not wisdom. - Gary Schubert (extending Cliff Stoll in *Silicon Snake Oil*)	https://www.cs.cmu.edu/~pattis/quotations.html
Any intelligent fool can make things bigger and more complex. It takes a touch of genius -and a lot of courage- to move in the opposite direction - E.F. Schumacher	https://www.cs.cmu.edu/~pattis/quotations.html
And simple truth miscalled simplicity, - W. Shakespeare (Sonnet 66)	https://www.cs.cmu.edu/~pattis/quotations.html
Learning results from what the student does and thinks, and only from what the student does and thinks. The teacher can advance learning only by influencing the student to learn. - H. Simon	https://www.cs.cmu.edu/~pattis/quotations.html
Mathematics is a language. We want scientists to be able to read it, speak it, and write it. But we are are not training them to be grammarians. - H. Simon	https://www.cs.cmu.edu/~pattis/quotations.html
I'd rather write programs to write programs than write programs. - D. Sites	https://www.cs.cmu.edu/~pattis/quotations.html
I cannot teach anybody anything, I can only make them think. - Socrates	https://www.cs.cmu.edu/~pattis/quotations.html
One must learn by doing the thing; for though you think you know it, you have no certainty, until you try. - Sophocles	https://www.cs.cmu.edu/~pattis/quotations.html
Computers do not solve problems -computers carry out solutions, specified by people, to problems. - D. D. Spencer	https://www.cs.cmu.edu/~pattis/quotations.html
EMACS could not have been reached by a process of careful design, because such processes arrive only at goals which are visible at the outset, and whose desirability is established on the bottom line at the outset. Neither I nor anyone else visualized an extensible editor until I had made one, nor appreciated its value until he had experienced it. EMACS exists because I felt free to make individually useful small improvements on a path whose end was not in sight. - R. Stallman	https://www.cs.cmu.edu/~pattis/quotations.html
Giving the Linus Torvalds Award to the Free Software Foundation is a bit like giving the Han Solo Award to the Rebel Alliance. - R. Stallman	https://www.cs.cmu.edu/~pattis/quotations.html
Being forced to write comments actually improves code, because it is easier to fix a crock than to explain it. - G. Steele	https://www.cs.cmu.edu/~pattis/quotations.html
[teaching]is rather artificial. The world is complicated and messy, with lots of loose ends, and the teacher's job is to impose order on the confusion, to convert a chaotic set of episodes into a coherent narrative. - I. Stewart (in *Letters to a Young Mathematician*)	https://www.cs.cmu.edu/~pattis/quotations.html
Don't get suckered in by the comments -they can be terribly misleading: Debug only the code. - D. Storer	https://www.cs.cmu.edu/~pattis/quotations.html
Design and programming are human activities; forget that and all is lost. - B. Stroustrup	https://www.cs.cmu.edu/~pattis/quotations.html
It is my firm belief that all successful languages are grown and not merely designed from first principles - B. Stroustrup (in *The Design and Evolution of C++*)	https://www.cs.cmu.edu/~pattis/quotations.html
More good code has been written in languages denounced as *bad* than in languages proclaimed *wonderful* -much more. - B. Stroustrup (in The Design and Evolution of C++)	https://www.cs.cmu.edu/~pattis/quotations.html
The most important single aspect of software development is to be clear about what you are trying to build. - B. Stroustrup	https://www.cs.cmu.edu/~pattis/quotations.html
There are only two kinds of programming languages: those people always bitch about and those nobody uses. - B. Stroustrup	https://www.cs.cmu.edu/~pattis/quotations.html
I have learned throughout my life as a composer chiefly through my mistakes and pursuits of false assumptions, not my exposure to founts of wisdom and knowledge. - I. Stravinsky	https://www.cs.cmu.edu/~pattis/quotations.html
Omit needless words. Vigorous writing is concise. A sentence should contain no unnecessary words, a paragraph no unnecessary sentences, for the same reason that a drawing should have no unnecessary lines and a machine no unnecessary parts. - W Strunk Jr (in The Elements of Style)	https://www.cs.cmu.edu/~pattis/quotations.html
Rewrite and revise. Do not be afraid to seize what you have and cut it to ribbons ... Good writing means good revising. - W Strunk Jr (in The Elements of Style)	https://www.cs.cmu.edu/~pattis/quotations.html
In engineering, as in other creative arts, we must learn to do analysis to support our efforts in synthesis. One cannot build a beautiful and functional bridge without a knowledge of steel and dirt, and a considerable mathematical technique for using this knowledge to compute the properties of structures. Similarly, one cannot build a beautiful computer system without a deep understanding of how to *previsualize* the process generated by the code one writes. - G. Sussman	https://www.cs.cmu.edu/~pattis/quotations.html
It is a bad plan that admits of no modification. - P. Syrus	https://www.cs.cmu.edu/~pattis/quotations.html
Once you succeed in writing the programs for [these] complicated algorithms, they usually run extremely fast. The computer doesn't need to understand the algorithm, its task is only to run the programs. - R. Tarjan	https://www.cs.cmu.edu/~pattis/quotations.html
A programming language is a system of notation for describing computations. A useful programming language must therefore be suited for both description(i.e., for human writers and readers of programs) and for computation (i.e., for efficient implementation on computers). But human beings and computers are so different that it is difficult to find notational devices that are well suited to the capabilities of both. - R. Tennant (Principles of Programming Languages, Prentice Hall, 1981)	https://www.cs.cmu.edu/~pattis/quotations.html
The function of genius is not to give new answers, but to pose new questions which time and mediocrity can resolve. - H. Trevor-Howard	https://www.cs.cmu.edu/~pattis/quotations.html
It is better to have an approximate answer to the right question than an exact answer to the wrong one. - J. Tukey	https://www.cs.cmu.edu/~pattis/quotations.html
Unless in communicating with it [a computer] one says exactly what one means, trouble is bound to result. - A. Turing	https://www.cs.cmu.edu/~pattis/quotations.html
We shall do a much better programming job, provided we approach the task with a full appreciation of its tremendous difficulty, provided that we respect the intrinsic limitations of the human mind and approach the task as very humble programmers. - A. Turing	https://www.cs.cmu.edu/~pattis/quotations.html
He [John von Neumann] had the invaluable faculty of being able to take the most difficult problem and separate it into its components, whereupon everything looked brlliantly simple. - S. Ulam (Bull. of American Mathematical Society, May 1958)	https://www.cs.cmu.edu/~pattis/quotations.html
It's easy to cry *bug* when the truth is that you've got a complex system and sometimes it takes a while to get all the components to co-exist peacefully. - D. Vargas	https://www.cs.cmu.edu/~pattis/quotations.html
The outcome of any serious research can only be to make two questions grow where only one grew before. - T. Veblen	https://www.cs.cmu.edu/~pattis/quotations.html
The best is the enemy of the good. - Voltaire (*Dramatic Art* in _Philosophical Dictionary, 1764)	https://www.cs.cmu.edu/~pattis/quotations.html
Judge a man by his questions, rather than his answers. - Voltaire	https://www.cs.cmu.edu/~pattis/quotations.html
The problem with using C++... is that there's already a strong tendancy in the language to require you to know everything before you can do anything. - L. Wall	https://www.cs.cmu.edu/~pattis/quotations.html
The mediocre teacher tells. The good teacher explains. The superior teacher demonstrates. The great teacher inspires. - W. A. Ward	https://www.cs.cmu.edu/~pattis/quotations.html
I think there is a world market for maybe five computers. - T. J. Watson (Founder and Chairman, IBM), 1943	https://www.cs.cmu.edu/~pattis/quotations.html
If you want to increase your success rate, double your failure rate. - T. J. Watson	https://www.cs.cmu.edu/~pattis/quotations.html
The best writing is rewriting. - E. B. White	https://www.cs.cmu.edu/~pattis/quotations.html
By relieving the brain of all unnecessary work, a good notation sets it free to concentrate on more advanced problems, and in effect increases the mental power of the race. - A. N. Whitehead	https://www.cs.cmu.edu/~pattis/quotations.html
It is a profoundly erroneous truism, repeated by all the copybooks, and by eminent people when they are making speeches, that we should cultivate the habit of thinking what we are doing. The precise opposite is the case. Civilization advances by extending the number of operations which we can perform without thinking about them. Operations of thought are like cavalry charges in a battle -they are strictly limited in number, they require fresh horses, and must only be made at decisive moments. - A. N. Whitehead (in *An Introduction to Mathematics*)	https://www.cs.cmu.edu/~pattis/quotations.html
The computer programmer ... is a creator of universes for which he alone is the lawgiver ... universes of virtually unlimited complexity can be created in the form of computer programs. Moreover ... systems so formulated and elaborated act out their programmed scripts. They compliantly obey their laws and vividly exhibit their obedient behavior. No playwright, no stage director, no emperor, however powerful, has ever exercised such absolute authority to arrange a stage or a field of battle and to command such unswervingly dutiful actors or troops. - J. Weizenbaum (Computer Power and Human Reason, page 115)	https://www.cs.cmu.edu/~pattis/quotations.html
Newton was a genius, but not because of the superior computational power of his brain. Newton's genius was, on the contrary, his ability to simplify, idealize, and streamline the world so that it became, in some measure, tractable to the brains of perfectly ordinary men. - G. M. Weinberg	https://www.cs.cmu.edu/~pattis/quotations.html
I have never learned anything except from people younger than myself. - O. Wilde	https://www.cs.cmu.edu/~pattis/quotations.html
As soon as we started programming, we found out to our surprise that it wasn't as easy to get programs right as we had thought. Debugging had to be discovered. I can remember the exact instant when I realized that a large part of my life from then on was going to be spent in finding mistakes in my own programs. - M. Wilkes	https://www.cs.cmu.edu/~pattis/quotations.html
Furious activity is no substitute for understanding. - H. H. Williams	https://www.cs.cmu.edu/~pattis/quotations.html
From a programmer's point of view, the user is a peripheral that types when you issue a read request. - P. Williams	https://www.cs.cmu.edu/~pattis/quotations.html
He knows the course forwards and backwards. He teaches it backwards - S. Willoughby (commenting on Garrett Birkhoff's freshman calculus course at Harvar	https://www.cs.cmu.edu/~pattis/quotations.html
in *The Other End of the Log: Memoirs of an Education Rebel*)  Complexity has and will maintain a strong fascination for many people. It is true that we live in a complex world and strive to solve inherently complex problems, which often do require complex mechanisms. However, this should not diminish our desire for elegant solutions, which convince by their clarity and effectiveness. Simple, elegant solutions are more effective, but they are harder to find than complex ones, and they require more time, which we too often believe to be unaffordable - N. Wirth	https://www.cs.cmu.edu/~pattis/quotations.html
Increasingly, people seem to misinterpret complexity as sophistication, which is baffling -the incomprehensible should cause suspicion rather than admiration. Possibly this trend results from a mistaken belief that using a somewhat mysterious device confers an aura of power on the user. - N. Wirth	https://www.cs.cmu.edu/~pattis/quotations.html
Software gets slower faster than hardware gets faster. (Or, sometimes known by] Grove [the head of Intel] giveth and Gates [the head of Microsoft] taketh away.) - N. Wirth	https://www.cs.cmu.edu/~pattis/quotations.html
Don't ask what it means, but rather how it is used. - L. Wittgenstein	https://www.cs.cmu.edu/~pattis/quotations.html
If we spoke a different language, we would perceive a somewhat different world. - L. Wittgenstein	https://www.cs.cmu.edu/~pattis/quotations.html
The limits of your language are the limits of your world. - L. Wittgenstein	https://www.cs.cmu.edu/~pattis/quotations.html
More bugs have been introduced into programs through premature optimization than any other cause, including pure stupidity. (sometimes quoted as, *More computing sins are committed in the name of efficiency (without necessarily achieving it) than for any other single reason -including blind stupidity.*) - W. Wulf	https://www.cs.cmu.edu/~pattis/quotations.html
Education is not the filling of a pail, but the lighting of a fire. - W.B. Yeats (See Plutarch: The mind...)	https://www.cs.cmu.edu/~pattis/quotations.html
Cutler, armed with a schedule [for finishing MS Windows NT], was urging the tream to *eat its own dog food.* Part macho stunt and part common sense, the *dog food diet* was the cornerstone of Cutler's philosophy. *We're going to run on the program we build,* he insisted. Eating dog food meant there would be no escape from facing the flaws and imperfections of NT. Even while immersed in his own piece of NT, a code writer would confront all of its weaknesses. By controlling the operations of a code writer's computer, NT would define the quality of his life. If at first NT tasted no better than dog food, all the better. Code writers would feel an urgent need to raise the dietary level by quickly fixing the errant code and writing more durable code in the first place. - G. P. Zachary (in *Show-Stopper: The Breakneck Race to Create Windows NT and the Next Generation at Microsoft*)	https://www.cs.cmu.edu/~pattis/quotations.html
Technical skill is mastery of complexity, while creativity is mastery of simplicity. - E. C. Zeeman	https://www.cs.cmu.edu/~pattis/quotations.html
One day Chao-Chou fell down in the snow, and called out: *Help me! Help Me!* A monk came and lay down beside him. Chao-Chou got up and went away. - Zen koan	https://www.cs.cmu.edu/~pattis/quotations.html
Who is wise? He who learns from all people...as it is said: *From all my teachers I gained understanding*. - B. Zoma (Psalms 119:99)	https://www.cs.cmu.edu/~pattis/quotations.html
Computers are useless.  They can only give you answers. -- Pablo Picasso	http://www.devtopics.com/101-great-computer-programming-quotes/
Computers are like bikinis. They save people a lot of guesswork. -- Sam Ewing	http://www.devtopics.com/101-great-computer-programming-quotes/
They have computers, and they may have other weapons of mass destruction. -- Janet Reno	http://www.devtopics.com/101-great-computer-programming-quotes/
That’s what’s cool about working with computers.  They don’t argue, they remember everything, and they don’t drink all your beer. -- Paul Leary	http://www.devtopics.com/101-great-computer-programming-quotes/
If the automobile had followed the same development cycle as the computer, a Rolls-Royce would today cost $100, get a million miles per gallon, and explode once a year, killing everyone inside. -- Robert X. Cringely	http://www.devtopics.com/101-great-computer-programming-quotes/
Computers are getting smarter all the time.  Scientists tell us that soon they will be able to talk to us.  (And by ‘they’, I mean ‘computers’.  I doubt scientists will ever be able to talk to us.) -- Dave Barry	http://www.devtopics.com/101-great-computer-programming-quotes/
I’ve noticed lately that the paranoid fear of computers becoming intelligent and taking over the world has almost entirely disappeared from the common culture.  Near as I can tell, this coincides with the release of MS-DOS. -- Larry DeLuca	http://www.devtopics.com/101-great-computer-programming-quotes/
The question of whether computers can think is like the question of whether submarines can swim. -- Edsger W. Dijkstra	http://www.devtopics.com/101-great-computer-programming-quotes/
It’s ridiculous to live 100 years and only be able to remember 30 million bytes.  You know, less than a compact disc.  The human condition is really becoming more obsolete every minute. -- Marvin Minsky	http://www.devtopics.com/101-great-computer-programming-quotes/
The city’s central computer told you?  R2D2, you know better than to trust a strange computer! -- C3PO	http://www.devtopics.com/101-great-computer-programming-quotes/
Never trust a computer you can’t throw out a window. -- Steve Wozniak	http://www.devtopics.com/101-great-computer-programming-quotes/
Hardware: The parts of a computer system that can be kicked. -- Jeff Pesis	http://www.devtopics.com/101-great-computer-programming-quotes/
Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves. -- Alan Kay	http://www.devtopics.com/101-great-computer-programming-quotes/
I’ve finally learned what ‘upward compatible’ means.  It means we get to keep all our old mistakes. -- Dennie van Tassel	http://www.devtopics.com/101-great-computer-programming-quotes/
There are two major products that come out of Berkeley: LSD and UNIX.  We don’t believe this to be a coincidence. -- Jeremy S. Anderson	http://www.devtopics.com/101-great-computer-programming-quotes/
19 Jan 2038 at 3:14:07 AM -- End of the word according to Unix–2^32 seconds after January 1, 1970	http://www.devtopics.com/101-great-computer-programming-quotes/
Every operating system out there is about equal… We all suck. -- Microsoft senior vice president Brian Valentine describing the state of the art in OS security, 2003	http://www.devtopics.com/101-great-computer-programming-quotes/
Microsoft has a new version out, Windows XP, which according to everybody is the ‘most reliable Windows ever.‘  To me, this is like saying that asparagus is ‘the most articulate vegetable ever.‘  -- Dave Barry	http://www.devtopics.com/101-great-computer-programming-quotes/
The Internet?  Is that thing still around?   -- Homer Simpson	http://www.devtopics.com/101-great-computer-programming-quotes/
The Web is like a dominatrix.  Everywhere I turn, I see little buttons ordering me to Submit. -- Nytwind	http://www.devtopics.com/101-great-computer-programming-quotes/
Come to think of it, there are already a million monkeys on a million typewriters, and Usenet is nothing like Shakespeare. -- Blair Houghton	http://www.devtopics.com/101-great-computer-programming-quotes/
The most amazing achievement of the computer software industry is its continuing cancellation of the steady and staggering gains made by the computer hardware industry. -- Henry Petroski	http://www.devtopics.com/101-great-computer-programming-quotes/
True innovation often comes from the small startup who is lean enough to launch a market but lacks the heft to own it. -- Timm Martin	http://www.devtopics.com/101-great-computer-programming-quotes/
It has been said that the great scientific disciplines are examples of giants standing on the shoulders of other giants.  It has also been said that the software industry is an example of midgets standing on the toes of other midgets. -- Alan Cooper	http://www.devtopics.com/101-great-computer-programming-quotes/
It is not about bits, bytes and protocols, but profits, losses and margins. -- Lou Gerstner	http://www.devtopics.com/101-great-computer-programming-quotes/
We are Microsoft.  Resistance Is Futile.  You Will Be Assimilated. -- Bumper sticker	http://www.devtopics.com/101-great-computer-programming-quotes/
No matter how slick the demo is in rehearsal, when you do it in front of a live audience, the probability of a flawless presentation is inversely proportional to the number of people watching, raised to the power of the amount of money involved. -- Mark Gibbs	http://www.devtopics.com/101-great-computer-programming-quotes/
The bulk of all patents are crap.  Spending time reading them is stupid.  It’s up to the patent owner to do so, and to enforce them. -- Linus Torvalds	http://www.devtopics.com/101-great-computer-programming-quotes/
Controlling complexity is the essence of computer programming. -- Brian Kernigan	http://www.devtopics.com/101-great-computer-programming-quotes/
Complexity kills.  It sucks the life out of developers, it makes products difficult to plan, build and test, it introduces security challenges, and it causes end-user and administrator frustration. -- Ray Ozzie	http://www.devtopics.com/101-great-computer-programming-quotes/
There are two ways of constructing a software design.  One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies. -- C.A.R. Hoare	http://www.devtopics.com/101-great-computer-programming-quotes/
The function of good software is to make the complex appear to be simple. -- Grady Booch	http://www.devtopics.com/101-great-computer-programming-quotes/
Just remember: you’re not a ‘dummy,’ no matter what those computer books claim.  The real dummies are the people who–though technically expert–couldn’t design hardware and software that’s usable by normal consumers if their lives depended upon it. -- Walter Mossberg	http://www.devtopics.com/101-great-computer-programming-quotes/
Software suppliers are trying to make their software packages more ‘user-friendly’…  Their best approach so far has been to take all the old brochures and stamp the words ‘user-friendly’ on the cover. -- Bill Gates	http://www.devtopics.com/101-great-computer-programming-quotes/
There’s an old story about the person who wished his computer were as easy to use as his telephone.  That wish has come true, since I no longer know how to use my telephone. -- Bjarne Stroustrup	http://www.devtopics.com/101-great-computer-programming-quotes/
Any fool can use a computer.  Many do. -- Ted Nelson	http://www.devtopics.com/101-great-computer-programming-quotes/
There are only two industries that refer to their customers as ‘users’. -- Edward Tufte	http://www.devtopics.com/101-great-computer-programming-quotes/
Programmers are in a race with the Universe to create bigger and better idiot-proof programs, while the Universe is trying to create bigger and better idiots.  So far the Universe is winning. -- Rich Cook	http://www.devtopics.com/101-great-computer-programming-quotes/
Most of you are familiar with the virtues of a programmer.  There are three, of course: laziness, impatience, and hubris. -- Larry Wall	http://www.devtopics.com/101-great-computer-programming-quotes/
The trouble with programmers is that you can never tell what a programmer is doing until it’s too late. -- Seymour Cray	http://www.devtopics.com/101-great-computer-programming-quotes/
That’s the thing about people who think they hate computers.  What they really hate is lousy programmers. -- Larry Niven	http://www.devtopics.com/101-great-computer-programming-quotes/
For a long time it puzzled me how something so expensive, so leading edge, could be so useless.  And then it occurred to me that a computer is a stupid machine with the ability to do incredibly smart things, while computer programmers are smart people with the ability to do incredibly stupid things.  They are, in short, a perfect match. -- Bill Bryson	http://www.devtopics.com/101-great-computer-programming-quotes/
Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter. -- Eric Raymond	http://www.devtopics.com/101-great-computer-programming-quotes/
A programmer is a person who passes as an exacting expert on the basis of being able to turn out, after innumerable punching, an infinite series of incomprehensive answers calculated with micrometric precisions from vague assumptions based on debatable figures taken from inconclusive documents and carried out on instruments of problematical accuracy by persons of dubious reliability and questionable mentality for the avowed purpose of annoying and confounding a hopelessly defenseless department that was unfortunate enough to ask for the information in the first place. -- IEEE Grid newsmagazine	http://www.devtopics.com/101-great-computer-programming-quotes/
A hacker on a roll may be able to produce–in a period of a few months–something that a small development group (say, 7-8 people) would have a hard time getting together over a year.  IBM used to report that certain programmers might be as much as 100 times as productive as other workers, or more. -- Peter Seebach	http://www.devtopics.com/101-great-computer-programming-quotes/
The best programmers are not marginally better than merely good ones.  They are an order-of-magnitude better, measured by whatever standard: conceptual creativity, speed, ingenuity of design, or problem-solving ability. -- Randall E. Stross	http://www.devtopics.com/101-great-computer-programming-quotes/
A great lathe operator commands several times the wage of an average lathe operator, but a great writer of software code is worth 10,000 times the price of an average software writer. -- Bill Gates	http://www.devtopics.com/101-great-computer-programming-quotes/
Don’t worry if it doesn’t work right.  If everything did, you’d be out of a job. -- Mosher’s Law of Software Engineering	http://www.devtopics.com/101-great-computer-programming-quotes/
Measuring programming progress by lines of code is like measuring aircraft building progress by weight. -- Bill Gates	http://www.devtopics.com/101-great-computer-programming-quotes/
Writing code has a place in the human hierarchy worth somewhere above grave robbing and beneath managing. -- Gerald Weinberg	http://www.devtopics.com/101-great-computer-programming-quotes/
First learn computer science and all the theory.  Next develop a programming style.  Then forget all that and just hack. -- George Carrette	http://www.devtopics.com/101-great-computer-programming-quotes/
First, solve the problem. Then, write the code. -- John Johnson	http://www.devtopics.com/101-great-computer-programming-quotes/
Optimism is an occupational hazard of programming; feedback is the treatment. -- Kent Beck	http://www.devtopics.com/101-great-computer-programming-quotes/
To iterate is human, to recurse divine. -- L. Peter Deutsch	http://www.devtopics.com/101-great-computer-programming-quotes/
The best thing about a boolean is even if you are wrong, you are only off by a bit. -- Anonymous	http://www.devtopics.com/101-great-computer-programming-quotes/
Should array indices start at 0 or 1?  My compromise of 0.5 was rejected without, I thought, proper consideration. -- Stan Kelly-Bootle	http://www.devtopics.com/101-great-computer-programming-quotes/
There are only two kinds of programming languages: those people always bitch about and those nobody uses. -- Bjarne Stroustrup	http://www.devtopics.com/101-great-computer-programming-quotes/
PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil perpetrated by skilled but perverted professionals. -- Jon Ribbens	http://www.devtopics.com/101-great-computer-programming-quotes/
The use of COBOL cripples the mind; its teaching should therefore be regarded as a criminal offense. -- E.W. Dijkstra	http://www.devtopics.com/101-great-computer-programming-quotes/
It is practically impossible to teach good programming style to students that have had prior exposure to BASIC.  As potential programmers, they are mentally mutilated beyond hope of regeneration. -- E. W. Dijkstra	http://www.devtopics.com/101-great-computer-programming-quotes/
I think Microsoft named .Net so it wouldn’t show up in a Unix directory listing. -- Oktal	http://www.devtopics.com/101-great-computer-programming-quotes/
There is no programming language–no matter how structured–that will prevent programmers from making bad programs. -- Larry Flon	http://www.devtopics.com/101-great-computer-programming-quotes/
Computer language design is just like a stroll in the park.  Jurassic Park, that is. -- Larry Wall	http://www.devtopics.com/101-great-computer-programming-quotes/
Fifty years of programming language research, and we end up with C++? -- Richard A. O’Keefe	http://www.devtopics.com/101-great-computer-programming-quotes/
Writing in C or C++ is like running a chain saw with all the safety guards removed. -- Bob Gray	http://www.devtopics.com/101-great-computer-programming-quotes/
In C++ it’s harder to shoot yourself in the foot, but when you do, you blow off your whole leg. -- Bjarne Stroustrup	http://www.devtopics.com/101-great-computer-programming-quotes/
C++ : Where friends have access to your private members. -- Gavin Russell Baker	http://www.devtopics.com/101-great-computer-programming-quotes/
One of the main causes of the fall of the Roman Empire was that–lacking zero–they had no way to indicate successful termination of their C programs. -- Robert Firth	http://www.devtopics.com/101-great-computer-programming-quotes/
Java is, in many ways, C++–. -- Michael Feldman	http://www.devtopics.com/101-great-computer-programming-quotes/
Saying that Java is nice because it works on all OSes is like saying that anal sex is nice because it works on all genders. -- Alanna	http://www.devtopics.com/101-great-computer-programming-quotes/
Fine, Java MIGHT be a good example of what a programming language should be like.  But Java applications are good examples of what applications SHOULDN’T be like. -- pixadel	http://www.devtopics.com/101-great-computer-programming-quotes/
If Java had true garbage collection, most programs would delete themselves upon execution. -- Robert Sewell	http://www.devtopics.com/101-great-computer-programming-quotes/
Software is like sex: It’s better when it’s free. -- Linus Torvalds	http://www.devtopics.com/101-great-computer-programming-quotes/
The only people who have anything to fear from free software are those whose products are worth even less. -- David Emery	http://www.devtopics.com/101-great-computer-programming-quotes/
Good code is its own best documentation. -- Steve McConnell	http://www.devtopics.com/101-great-computer-programming-quotes/
Any code of your own that you haven’t looked at for six or more months might as well have been written by someone else. -- Eagleson’s Law	http://www.devtopics.com/101-great-computer-programming-quotes/
The first 90% of the code accounts for the first 90% of the development time.  The remaining 10% of the code accounts for the other 90% of the development time. -- Tom Cargill	http://www.devtopics.com/101-great-computer-programming-quotes/
Good programmers use their brains, but good guidelines save us having to think out every case. -- Francis Glassborow	http://www.devtopics.com/101-great-computer-programming-quotes/
In software, we rarely have meaningful requirements.  Even if we do, the only measure of success that matters is whether our solution solves the customer’s shifting idea of what their problem is. -- Jeff Atwood	http://www.devtopics.com/101-great-computer-programming-quotes/
Considering the current sad state of our computer programs, software development is clearly still a black art, and cannot yet be called an engineering discipline. -- Bill Clinton	http://www.devtopics.com/101-great-computer-programming-quotes/
You can’t have great software without a great team, and most software teams behave like dysfunctional families. -- Jim McCarthy	http://www.devtopics.com/101-great-computer-programming-quotes/
As soon as we started programming, we found to our surprise that it wasn’t as easy to get programs right as we had thought.  Debugging had to be discovered.  I can remember the exact instant when I realized that a large part of my life from then on was going to be spent in finding mistakes in my own programs. -- Maurice Wilkes discovers debugging, 1949	http://www.devtopics.com/101-great-computer-programming-quotes/
Debugging is twice as hard as writing the code in the first place.  Therefore, if you write the code as cleverly as possible, you are–by definition–not smart enough to debug it. -- Brian Kernighan	http://www.devtopics.com/101-great-computer-programming-quotes/
If debugging is the process of removing bugs, then programming must be the process of putting them in. -- Edsger W. Dijkstra	http://www.devtopics.com/101-great-computer-programming-quotes/
I don’t care if it works on your machine!  We are not shipping your machine! -- Vidiu Platon	http://www.devtopics.com/101-great-computer-programming-quotes/
Programming is like sex: one mistake and you’re providing support for a lifetime. -- Michael Sinz	http://www.devtopics.com/101-great-computer-programming-quotes/
There are two ways to write error-free programs; only the third one works. -- Alan J. Perlis	http://www.devtopics.com/101-great-computer-programming-quotes/
You can either have software quality or you can have pointer arithmetic, but you cannot have both at the same time. -- Bertrand Meyer	http://www.devtopics.com/101-great-computer-programming-quotes/
If McDonalds were run like a software company, one out of every hundred Big Macs would give you food poisoning, and the response would be, ‘We’re sorry, here’s a coupon for two more.’  -- Mark Minasi	http://www.devtopics.com/101-great-computer-programming-quotes/
Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. -- Martin Golding	http://www.devtopics.com/101-great-computer-programming-quotes/
To err is human, but to really foul things up you need a computer. -- Paul Ehrlich	http://www.devtopics.com/101-great-computer-programming-quotes/
A computer lets you make more mistakes faster than any invention in human history–with the possible exceptions of handguns and tequila. -- Mitch Radcliffe	http://www.devtopics.com/101-great-computer-programming-quotes/
Everything that can be invented has been invented. -- Charles H. Duell, Commissioner, U.S. Office of Patents, 1899	http://www.devtopics.com/101-great-computer-programming-quotes/
I think there’s a world market for about 5 computers. -- Thomas J. Watson, Chairman of the Board, IBM, circa 1948	http://www.devtopics.com/101-great-computer-programming-quotes/
It would appear that we have reached the limits of what it is possible to achieve with computer technology, although one should be careful with such statements, as they tend to sound pretty silly in 5 years.  -- John Von Neumann, circa 1949	http://www.devtopics.com/101-great-computer-programming-quotes/
But what is it good for? -- Engineer at the Advanced Computing Systems Division of IBM, commenting on the microchip, 1968	http://www.devtopics.com/101-great-computer-programming-quotes/
There is no reason for any individual to have a computer in his home. -- Ken Olson, President, Digital Equipment Corporation, 1977	http://www.devtopics.com/101-great-computer-programming-quotes/
640K ought to be enough for anybody. -- Bill Gates, 1981	http://www.devtopics.com/101-great-computer-programming-quotes/
Windows NT addresses 2 Gigabytes of RAM, which is more than any application will ever need.  -- Microsoft, on the development of Windows NT, 1992	http://www.devtopics.com/101-great-computer-programming-quotes/
We will never become a truly paper-less society until the Palm Pilot folks come out with WipeMe 1.0. -- Andy Pierson	http://www.devtopics.com/101-great-computer-programming-quotes/
If it keeps up, man will atrophy all his limbs but the push-button finger. -- Frank Lloyd Wright	http://www.devtopics.com/101-great-computer-programming-quotes/
Good design adds value faster than it adds cost. Thomas C. Gale	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
The evolution of languages: FORTRAN is a non-typed language. C is a weakly typed language. Ada is a strongly typed language. C++ is a strongly hyped language. Ron Sercely	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
When someone says: 'I want a programming language in which I need only say what I wish done', give him a lollipop.  Alan J. Perlis	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
In My Egotistical Opinion, most people's C programs should be indented six feet downward and covered with dirt. Blair P. Houghton	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
For a long time it puzzled me how something so expensive, so leading edge, could be so useless. And then it occurred to me that a computer is a stupid machine with the ability to do incredibly smart things, while computer programmers are smart people with the ability to do incredibly stupid things. They are, in short, a perfect match. Bill Bryson	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
FORTRAN is not a flower but a weed — it is hardy, occasionally blooms, and grows in every computer.  Alan J. Perlis	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
In the one and only true way. The object-oriented version of 'Spaghetti code' is, of course, 'Lasagna code'. (Too many layers)." Roberto Waltman	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Python's a drop-in replacement for BASIC in the sense that Optimus Prime is a drop-in replacement for a truck. Cory Dodt	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
The use of COBOL cripples the mind; its teaching should therefore be regarded as a criminal offense. E.W. Dijkstra	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Considering the current sad state of our computer programs, software development is clearly still a black art, and cannot yet be called an engineering discipline. Bill Clinton	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Fine, Java MIGHT be a good example of what a programming language should be like. But Java applications are good examples of what applications SHOULDN’T be like. pixadel	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
I think Microsoft named .Net so it wouldn’t show up in a Unix directory listing. Oktal	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Don’t worry if it doesn’t work right. If everything did, you’d be out of a job. Mosher’s Law of Software Engineering	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter. Eric S. Raymond	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
I have always wished for my computer to be as easy to use as my telephone; my wish has come true because I can no longer figure out how to use my telephone. Bjarne Stroustrup	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
A C program is like a fast dance on a newly waxed dance floor by people carrying razors. Waldi Ravens	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
A programming language is low level when its programs require attention to the irrelevant. Alan J. Perlis	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
They don't make bugs like Bunny anymore. Olav Mjelde	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Lisp isn't a language, it's a building material. Alan Kay	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Walking on water and developing software from a specification are easy if both are frozen. Edward V Berard	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Talk is cheap. Show me the code. Linus Torvalds	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Perfection [in design] is achieved, not when there is nothing more to add, but when there is nothing left to take away. Antoine de Saint-Exupéry	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
C is quirky, flawed, and an enormous success. Dennis M. Ritchie	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
In theory, theory and practice are the same. In practice, they’re not. Yogi Berra	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
You can’t have great software without a great team, and most software teams behave like dysfunctional families. Jim McCarthy	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil, perpetrated by skilled but perverted professionals.Jon Ribbens	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
It is easier to port a shell than a shell script. Larry Wall	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Perl – The only language that looks the same before and after RSA encryption. Keith Bostic	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Programming is like kicking yourself in the face, sooner or later your nose will bleed. Kyle Woodbury	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Learning to program has no more to do with designing interactive software than learning to touch type has to do with writing poetry. Ted Nelson	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
If McDonalds were run like a software company, one out of every hundred Big Macs would give you food poisoning, and the response would be, ‘We’re sorry, here’s a coupon for two more.’ Mark Minasi	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
The best programmers are not marginally better than merely good ones. They are an order-of-magnitude better, measured by whatever standard: conceptual creativity, speed, ingenuity of design, or problem-solving ability. Randall E. Stross	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
I invented the term 'Object-Oriented', and I can tell you I did not have C++ in mind. Alan Kay	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Sometimes it pays to stay in bed on Monday, rather than spending the rest of the week debugging Monday's code. Christopher Thompson	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
I don't care if it works on your machine! We are not shipping your machine! Vidiu Platon	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Computer system analysis is like child-rearing; you can do grievous damage, but you cannot ensure success. Tom DeMarco	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Beware of bugs in the above code; I have only proved it correct, not tried it. Donald E. Knuth	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves. Alan Kay	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris. Larry Wall	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Measuring programming progress by lines of code is like measuring aircraft building progress by weight. Bill Gates	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it. Brian W. Kernighan	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
People think that computer science is the art of geniuses but the actual reality is the opposite, just many people doing things that build on each other, like a wall of mini stones. Donald Knuth	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
First learn computer science and all the theory. Next develop a programming style. Then forget all that and just hack. George Carrette	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
To iterate is human, to recurse divine. L. Peter Deutsch	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
The trouble with programmers is that you can never tell what a programmer is doing until it’s too late. Seymour Cray	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies. C.A.R. Hoare	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Always code as if the guy who ends up maitaining your code will be a violent psychopath who knows where you live. Martin Golding	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program. Linus Torvalds	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
On two occasions I have been asked [by members of Parliament]: 'Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out?' I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question. Charles Babbage	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the universe trying to build bigger and better idiots. So far, the universe is winning. Rick Cook	http://csillustrated.berkeley.edu/PDFs/posters/50-CS-Quotes-poster.pdf
Profanity is the one language all programmers know best.	https://www.gdargaud.net/Humor/QuotesProgramming.html
When someone says: 'I want a programming language in which I need only say what I wish done', give him a lollipop.    — Alan J. Perlis.	https://www.gdargaud.net/Humor/QuotesProgramming.html
A programming language is low level when its programs require attention to the irrelevant.    — Buy at Amazon.comAlan J. Perlis.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I have the ability to arrange 1's and 0's in such an order that an x86 processor can actually interpret and execute those commands. It's called Computer Programming, but it's the closest that a man can ever get to giving birth in my opinion. And I somehow feel responsible for the future existence and acceptance of my child". I'd spend hours trying to find the tiny bug that causes my child to misbehave or act strangely. But that's my mild superpower... I make the world a better place by writing mindless back-end programs that no-one will ever see nor even know that it's there. But I know; and that's all that matters."    — Alucard.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I'm taking a break from programming and trying to escape the world of geekness and then WinAmp brings up 'Norah Jones — Pointer Song' GODAMN IT LEAVE ME ALONE.    — billy_s.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Typing is no substitute for thinking.    — Dartmouth Basic manual, 1964.	https://www.gdargaud.net/Humor/QuotesProgramming.html
It should be noted that no ethically-trained software engineer would ever consent to write a DestroyBaghdad procedure. Basic professional ethics would instead require him to write a DestroyCity procedure, to which Baghdad could be given as a parameter.    — Nathaniel Borenstein. Two languages implementing the same idea must, on pain of death, use different terms."    — Feldman's Law of Programming Terminology.	https://www.gdargaud.net/Humor/QuotesProgramming.html
C & Unix	https://www.gdargaud.net/Humor/QuotesProgramming.html
It's 5.50 a.m.... Do you know where your stack pointer is ?	https://www.gdargaud.net/Humor/QuotesProgramming.html
C /n./: A programming language that is sort of like Pascal except more like assembly except that it isn't very much like either one, or anything else. It is either the best language available to the art today, or it isn't. — Ray Simard.	https://www.gdargaud.net/Humor/QuotesProgramming.html
If it wasn't for C, we'd be writing programs in BASI, PASAL, and OBOL.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I have yet to meet a C compiler that is more friendly and easier to use than eating soup with a knife.	https://www.gdargaud.net/Humor/QuotesProgramming.html
In My Egotistical Opinion, most people's C programs should be indented six feet downward and covered with dirt.    — Blair P. Houghton.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Going from programming in Pascal to programming in C, is like learning to write in Morse code.    — J.P. Candusso.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Trying to outsmart a compiler defeats much of the purpose of using one.    — Kernighan & Plauger, The Buy at Amazon.comElements of Programming Style.	https://www.gdargaud.net/Humor/QuotesProgramming.html
If you lie to the compiler, it will have its revenge.    — Henry Spencer.	https://www.gdargaud.net/Humor/QuotesProgramming.html
#define QUESTION ((bb) || !(bb))    — Shakespeare.	https://www.gdargaud.net/Humor/QuotesProgramming.html
C is not a high-level language.    — Kernighan.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I like C, because it avoids class warfare.    — Elon Musk.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Any C programmer here ? Yeah i got a C in programming class. That counts ?	https://www.gdargaud.net/Humor/QuotesProgramming.html
In C expressions, you can assume that *, /, and % come before + and -. Put parentheses around everything else.    — Steve Oualline, C Elements of Style.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I will not be a lemming and follow the crowd over the cliff and into the C.    — John (Jack) Beidler.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Because we are returning a copy for postfix ++ expressions, statements such as (c++)++; won't work as expected.    — Weiskamp & Flamig, The Buy at Amazon.comComplete C++ Primer.	https://www.gdargaud.net/Humor/QuotesProgramming.html
... one of the main causes of the fall of the Roman Empire was that, lacking zero, they had no way to indicate successful termination of their C programs.    — Robert Firth.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I've never met anyone responsible for C language code maintenance who speaks well of the C Language. Anyone out there who LIKES to maintain C code ?    — Ted Dennison.	https://www.gdargaud.net/Humor/QuotesProgramming.html
int total_hours_wasted_here = 67;"	https://www.gdargaud.net/Humor/QuotesProgramming.html
C is quirky, flawed, and an enormous success.    — Buy at Amazon.comDennis M. Ritchie (1941-2011).	https://www.gdargaud.net/Humor/QuotesProgramming.html
A C program is like a fast dance on a newly waxed dance floor by people carrying razors.    — Waldi Ravens.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The C Programming Language — A language which combines the flexibility of assembly language with the power of assembly language.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The more I C, the less I see.	https://www.gdargaud.net/Humor/QuotesProgramming.html
C programmers never die. They are just cast into void.	https://www.gdargaud.net/Humor/QuotesProgramming.html
It is easier to port a shell than a shell script.    — Larry Wall.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Fixing Unix is easier than living with NT.    — Jonathan Gilpin.	https://www.gdargaud.net/Humor/QuotesProgramming.html
There are two major products that come out of Berkeley: LSD and UNIX. We don't believe this to be a coincidence.    — Jeremy S. Anderson.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I liken starting one's computing career with Unix, say as an undergraduate, to being born in East Africa. It is intolerably hot, your body is covered with lice and flies, you are malnourished and you suffer from numerous curable diseases. But, as far as young East Africans can tell, this is simply the natural condition and they live within it. By the time they find out differently, it is too late. They already think that the writing of shell scripts is a natural act.    — Ken Pier, Xerox PARC.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The original Unix solved a problem and solved it well, as did the Roman numeral system, the mercury treatment for syphilis, and carbon paper.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Confucius say: He who play in root, eventually kill tree.	https://www.gdargaud.net/Humor/QuotesProgramming.html
To err is human... to really foul up requires the root password.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Unix is the answer, but only if you phrase the question very carefully.	https://www.gdargaud.net/Humor/QuotesProgramming.html
19 Jan 2038 at 3:14:07 AM    — The end of the word according to Unix (232 seconds after Jan 1st 1970).	https://www.gdargaud.net/Humor/QuotesProgramming.html
Unix is user-friendly. It's just very selective about who its friends are.	https://www.gdargaud.net/Humor/QuotesProgramming.html
UNIX: It's not just 'User-Unfriendly', it's 'Proactively User-Hostile' !	https://www.gdargaud.net/Humor/QuotesProgramming.html
Programming graphics in X is like finding sqrt(pi) using Roman numerals. 	https://www.gdargaud.net/Humor/QuotesProgramming.html
The number of the beast — vi vi vi.	https://www.gdargaud.net/Humor/QuotesProgramming.html
In years past, I knew of someone who used emacs as his login shell, the only thing he found wanting in emacs was a good text editor. So he ended up using vi.    — Anonymous	https://www.gdargaud.net/Humor/QuotesProgramming.html
VMS is a text-only adventure game. If you win you can use unix.    — W. Davidson.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The big difference between UNIX and VMS: To do anything on UNIX, you need to know an obscure command. To do anything on VMS, you need to know an obscure option to SET.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Fifty years of programming language research, and we end up with C++ ???    — Buy at Amazon.comRichard A. O'Keefe.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I invented the term 'Object-Oriented', and I can tell you I did not have C++ in mind.    — Alan Kay, creator of Buy at Amazon.comSmalltalk.	https://www.gdargaud.net/Humor/QuotesProgramming.html
C++: Hard to learn and built to stay that way.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Java is, in many ways, C++--.    — Michael Feldman.	https://www.gdargaud.net/Humor/QuotesProgramming.html
C++ is a horrible language. It's made more horrible by the fact that a lot of substandard programmers use it, to the point where it's much much easier to generate total and utter crap with it. Quite frankly, even if the choice of C were to do *nothing* but keep the C++ programmers out, that in itself would be a huge reason to use C.    — Linux Torvalds.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Friends, much as in real life, are often more trouble than their worth.    — Scott Meyers on friend functions in C++.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Writing in C or C++ is like running a chain saw with all the safety guards removed,    — Bob Gray.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Ever spend a little time reading comp.lang.c++ ? That's really the best place to learn about the number of C++ users looking for a better language.    — R. William Beckwith.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The evolution of languages: FORTRAN is a non-typed language. C is a weakly typed language. Ada is a strongly typed language. C++ is a strongly hyped language.    — Ron Sercely.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Don't include a single line in your code which you could not explain to your grandmother in a matter of two minutes. And of course... assume your grandmother is not Ada Lovelace.    — Anonymous.	https://www.gdargaud.net/Humor/QuotesProgramming.html
PL/I and Ada started out with all the bloat, were very daunting languages, and got bad reputations (deservedly). C++ has shown that if you slowly bloat up a language over a period of years, people don't seem to mind as much.    — James Hague.	https://www.gdargaud.net/Humor/QuotesProgramming.html
What is the object oriented way of getting rich ? — Inheritance .	https://www.gdargaud.net/Humor/QuotesProgramming.html
In the one and only true way. The object-oriented version of 'Spaghetti code' is, of course, 'Lasagna code'. (Too many layers).    — Roberto Waltman.	https://www.gdargaud.net/Humor/QuotesProgramming.html
C(++) is a write-only, high-level assembler language.    — Stefan Van Baelen.	https://www.gdargaud.net/Humor/QuotesProgramming.html
— C++ has its place in the history of programming languages. — Just as Caligula has his place in the history of the Roman Empire ?    — Robert Firth.	https://www.gdargaud.net/Humor/QuotesProgramming.html
C++ : Where friends have access to your private members.    — Gavin Russell Baker.	https://www.gdargaud.net/Humor/QuotesProgramming.html
C++ would make a decent teaching language if we could teach the ++ part without the C part.    — Michael B. Feldman.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The great thing about Object Oriented code is that it can make small, simple problems look like large, complex ones.	https://www.gdargaud.net/Humor/QuotesProgramming.html
In C++ it's harder to shoot yourself in the foot, but when you do, you blow off your whole leg.    — Buy at Amazon.comBjarne Stroustrup.	https://www.gdargaud.net/Humor/QuotesProgramming.html
There are only two kinds of languages: the ones people complain about and the ones nobody uses.    — Bjarne Stroustrup, creator of C++.	https://www.gdargaud.net/Humor/QuotesProgramming.html
If you put 100 million monkeys to hammer away at keyboards for 100 million years, one of them will write a c program. The rest will write Perl.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Hybrid ('half-assed') object languages like C++ are worst of all, as they unite the simplicity of Brainfuck with the inherent security of C and the speed of Perl.    — Tony.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Cobol: Completely Obsolete Business Orientated Language.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The use of COBOL cripples the mind; its teaching should therefore be regarded as a criminal offense.    — Buy at Amazon.comE.W. Dijkstra (1930—2002).	https://www.gdargaud.net/Humor/QuotesProgramming.html
COBOL programs are an exercise in Artificial Inelegance.	https://www.gdargaud.net/Humor/QuotesProgramming.html
If a group of N persons implements a COBOL compiler, there will be N-1 passes. Someone in the group has to be the manager.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Shots through the Buy at Amazon.comTerminator's vision show Motorola 6502 microprocessor assembler code; the 6502 chip is the main CPU for the Apple II computer. Other code visible is written in COBOL.    — From the IMDB trivia.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Erroneous COBOL programs were often referred to as 'pregnant programs' because the issue was usually due to missed periods.	https://www.gdargaud.net/Humor/QuotesProgramming.html
COBOL programmers understand why women hate periods.	https://www.gdargaud.net/Humor/QuotesProgramming.html
If Python is executable pseudocode, then perl is executable line noise.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Python's a drop-in replacement for BASIC in the sense that Optimus Prime is a drop-in replacement for a truck.    — MFen.	https://www.gdargaud.net/Humor/QuotesProgramming.html
PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil, perpetrated by skilled but perverted professionals.    — Jon Ribbens.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I'm not a real programmer. I throw together things until it works then I move on. The real programmers will say: yeah it works but you're leaking memory everywhere. Perhaps we should fix that". I'll just restart apache every 10 requests."    — Rasmus Lerdorf, author of PHP.	https://www.gdargaud.net/Humor/QuotesProgramming.html
If PHP was originally designed explicitly for non-programmers, does that mean you write non-programs with it ?	https://www.gdargaud.net/Humor/QuotesProgramming.html
Perl 1.0: All the power of QBasic, the readability of assembly, and the flexibility of DOS batch scripting...	https://www.gdargaud.net/Humor/QuotesProgramming.html
If I've got a simple task to do (eg the text-file-of-URLS example) then I knock it up in shell script. By the time that simple task has feature-creeped up to more than 20 lines I start to wish I'd written it in Perl. So I rewrite. By the time that Perl script has crept up to more than 200 lines I start to wish it was written in Python. So I rewrite. By the time that Python script has crept up to 2000 lines I start to wish I'd farmed the job out to a team of programmers, and I give up caring what language its written in and make them do it as a web service. Then I write a small shell script to call their web service. When that shell script has feature-creeped up to more than 20 lines...    — Bazman.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Though I'll admit readability suffers slightly...    — Larry Wall (of Buy at Amazon.comPerl fame).	https://www.gdargaud.net/Humor/QuotesProgramming.html
Larry Wall invented Perl. If that doesn't show the mind-twisting effect that religion can have on some people, I don't know what does.    — UserGogol upon learning that Buy at Amazon.comLarry Wall is Christian.	https://www.gdargaud.net/Humor/QuotesProgramming.html
When they first built the University of California at Irvine they just put the buildings in. They did not put any sidewalks, they just planted grass. The next year, they came back and put the sidewalks where the trails were in the grass. Perl is just that kind of language. It is not designed from first principles. Perl is those sidewalks in the grass.    — Buy at Amazon.comLarry Wall.	https://www.gdargaud.net/Humor/QuotesProgramming.html
After Perl everything else is just assembly language.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I would rather use Java than Perl. And I'd rather be eaten by a crocodile than use Java.    — Trouser.	https://www.gdargaud.net/Humor/QuotesProgramming.html
If I wanted plastic scissors I'd use Java. Give me my scalpel back.    — JustNiz.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Saying that Java is nice because it works on all OSs is like saying that anal sex is nice because it works on all genders.    — Alanna.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I won't program in java anymore. I'm not Marxist and don't believe in classes.    — phluid.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Fine, Java MIGHT be a good example of what a programming language should be like. But Java applications are good examples of what applications SHOULDN'T be like.    — pixadel.	https://www.gdargaud.net/Humor/QuotesProgramming.html
While the PHP libraries may be a touch on the fragile and 'arbitrary' side, compared to the libraries in Java, for example, the language itself is like Miss America to Perl's Roseanne Barr.    — Fnkmaster.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Perl is like my ex-girlfriend... I used to be all over her^H^H^Hit but am now fawning over the knockout redhead Ruby. Unfortunately, I had several children with my ex that still need to be cared for — feature improvements, bugfixes, restarts. Hopefully one day they'll grow up and leave the house so Ruby can have me all to herself.    — tedhiltonhead.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Some people, when confronted with a problem, think 'I know, I'll use regular expressions'. Now they have two problems.    — Jamie Zawinski.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Q: When do I need xml ? A: When I need a new buzz word for my resume.    — From the W3 XML page.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Schematics of a software project	https://www.gdargaud.net/Humor/QuotesProgramming.html
Ada, Fortran, Lisp, assembler, brainf**k and whatnot...	https://www.gdargaud.net/Humor/QuotesProgramming.html
Some languages are designed to solve a problem. Others are designed to prove a point.    — Bell Labs saying.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Do you program in Assembly ? she asked. "NOP", he said.	https://www.gdargaud.net/Humor/QuotesProgramming.html
A developer writes an average of 6 lines of code per day for the entire project; think what you can do with 6 lines of Assembler and with 6 lines of a high level language.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Low-level programming is good for the programmer's soul.    — John Carmack.	https://www.gdargaud.net/Humor/QuotesProgramming.html
You can tell how far we have to go, when FORTRAN is the language of supercomputers.    — Buy at Amazon.comSteven Feiner.	https://www.gdargaud.net/Humor/QuotesProgramming.html
FORTRAN, the infantile disorder, by now nearly 20 years old, is hopelessly inadequate for whatever computer application you have in mind today: it is now too clumsy, too risky, and too expensive to use.    — Buy at Amazon.comEdsger W. Dijkstra, circa 1970.	https://www.gdargaud.net/Humor/QuotesProgramming.html
FORTRAN was the language of choice for the same reason that three-legged races are popular.    — Ken Thompson, "Reflections on Trusting Trust"	https://www.gdargaud.net/Humor/QuotesProgramming.html
In the good old days physicists repeated each other's experiments, just to be sure. Today they stick to FORTRAN, so that they can share each other's programs, bugs included.    — Buy at Amazon.comE.W. Dijkstra (1930—2002).	https://www.gdargaud.net/Humor/QuotesProgramming.html
Consistently separating words by spaces became a general custom about the tenth century A.D., and lasted until about 1957, when FORTRAN abandoned the practice.    — Sun FORTRAN Reference Manual .	https://www.gdargaud.net/Humor/QuotesProgramming.html
FORTRAN is not a flower but a weed — it is hardy, occasionally blooms, and grows in every computer.    — Buy at Amazon.comAlan J. Perlis.	https://www.gdargaud.net/Humor/QuotesProgramming.html
You can create bad Fortran in any language.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I am pissed off. My university's motto is 'A university for the REAL world'. And so they start off a game programming degree with six months of LISP.    — TraumaPony.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Lisp isn't a language, it's a building material.    — Alan Kay.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The problem with object-oriented languages is that they've got all this implicit environment that they carry around with them. You wanted a banana but what you've got is a gorilla holding the banana and the entire jungle.    — Joe Armstrong, inventor of Erlang.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Any language that will allow you to define the number 4 as a word that places the number 3 on the stack can be a frightening weapon.    — About Buy at Amazon.comForth.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Pascal /n./ A programming language named after a man who would turn over in his grave if he knew about it.	https://www.gdargaud.net/Humor/QuotesProgramming.html
BASIC programmers never die, they GOSUB and don't RETURN.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Real programmers don't write in BASIC. Actually, no programmers write in BASIC after reaching puberty.	https://www.gdargaud.net/Humor/QuotesProgramming.html
When Roman engineers built a bridge, they had to stand under it while the first legion marched across. If programmers today worked under similar ground rules, they might well find themselves getting much more interested in Ada !    — Robert Dewar, President Ada Core Technologies.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Q: If anyone knows of a book that is the functional equivalent of 'The Idiot's Guide to C' for the Ada language, please send me the title and author. A: Idiots don't use Ada. Idiots only use C or derivations.    — David Weller.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Epigram: Ada is the 400-pound gorilla of programming languages.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The problem about all graphical programming languages is that when your project becomes complex, not only will you have spaghetti code, but it will actually look like spaghetti too.	https://www.gdargaud.net/Humor/QuotesProgramming.html
They don't make bugs like Bunny anymore.    — Olav Mjelde.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Always apply the latest updates' and 'If it ain't broke, don't fix it' are the two rules of system administration...	https://www.gdargaud.net/Humor/QuotesProgramming.html
If debugging is the process of removing software bugs, then programming must be the process of putting them in.	https://www.gdargaud.net/Humor/QuotesProgramming.html
A debugged program is one for which you have not yet found the conditions that make it fail.    — Jerry Ogdin.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Spiders are the only web developers that enjoy finding bugs.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Why do programmers prefer dark mode ? Cause light attracts bugs.	https://www.gdargaud.net/Humor/QuotesProgramming.html
On two occasions I have been asked [by members of Parliament!]: 'Pray, Mr. Babbage, if you put into the machine wrong figures, will the right answers come out ?' I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question.    — Buy at Amazon.comCharles Babbage.	https://www.gdargaud.net/Humor/QuotesProgramming.html
That's the thing about people who think they hate computers. What they really hate is lousy programmers.    — Larry Niven and Jerry Pournelle in "Oath of Fealty".	https://www.gdargaud.net/Humor/QuotesProgramming.html
Program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.    — Buy at Amazon.comEdsger W. Dijkstra.	https://www.gdargaud.net/Humor/QuotesProgramming.html
At the source of every error which is blamed on the computer you will find at least two human errors, including the error of blaming it on the computer.	https://www.gdargaud.net/Humor/QuotesProgramming.html
When the only tool you own is a hammer, every problem you encounter resembles a nail.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Debugging is being a detective in a crime story where you are also the murderer.	https://www.gdargaud.net/Humor/QuotesProgramming.html
System Error: press F13 to continue...	https://www.gdargaud.net/Humor/QuotesProgramming.html
99 little bugs in the code. 99 little bugs in the code. Take one down, patch it around. 127 little bugs in the code...	https://www.gdargaud.net/Humor/QuotesProgramming.html
To err is human, but for a real disaster you need a computer.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Some developers, when encountering a problem, say: 'I know, I'll use floating-point numbers !' Now, they have 1.9999999997 problems.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I got .99999999 problems, and a float ain't one.	https://www.gdargaud.net/Humor/QuotesProgramming.html
My computer NEVER loc Computers make very fast, very accurate mistakes."	https://www.gdargaud.net/Humor/QuotesProgramming.html
If it works, leave it alone — there's no need to understand it. If it fails, try to fix it — there's no time to understand it.    — Bill Pfeifer.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I have a friend who told me that the very best computer system ever built by mankind was by the Druids at Stonehenge. Well, that's an old story. But what I liked was that he felt the Druids didn't die out, they just went bankrupt trying to debug the software.    — J. Finke.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Assumption is the mother of all fuckups.    — Anonymous.	https://www.gdargaud.net/Humor/QuotesProgramming.html
It's not that I'm surrounded by incompetence that bothers me, it's that I fit in so well.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Weeks of programming can save you hours of planning.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I don't care if it works on your machine! We are not shipping your machine!    — Vidiu Platon.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.    — Brian W. Kernighan.	https://www.gdargaud.net/Humor/QuotesProgramming.html
We know about as much about software quality problems as they knew about the Black Plague in the 1600s. We've seen the victims' agonies and helped burn the corpses. We don't know what causes it; we don't really know if there is only one disease. We just suffer — and keep pouring our sewage into our water supply.    — Tom Van Vleck.	https://www.gdargaud.net/Humor/QuotesProgramming.html
...In fact, never ever use gets() or sprintf(), period. If you do we will send evil dwarfs after you.    — FreeBSD Secure Programming Guidelines.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The combination of threads, remote-procedure-call interfaces, and heavyweight object-oriented design is especially dangerous... if you are ever invited onto a project that is supposed to feature all three, fleeing in terror might well be an appropriate reaction.    — Eric Raymond, "The Art of Unix Programming".	https://www.gdargaud.net/Humor/QuotesProgramming.html
The best thing about a boolean is even if you are wrong, you are only off by a bit.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Would you rather Test-First, or Debug-Later ?    — Robert Martin .	https://www.gdargaud.net/Humor/QuotesProgramming.html
Don't worry, we have plenty of time to get the Nuclear Missile Launch program Y2K compliant, besides, I always code better after a few drinks.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Life would be so much easier if we only had the source code.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Who is this 'General Failure' and why is he reading my disk ?	https://www.gdargaud.net/Humor/QuotesProgramming.html
Programmers and old people have a lot in common. We're both always looking for ways to control leaks and dumps.    — Ralf.	https://www.gdargaud.net/Humor/QuotesProgramming.html
hAS aNYONE sEEN MY cAPSLOCK kEY ?	https://www.gdargaud.net/Humor/QuotesProgramming.html
It is easier to change the specification to fit the program than vice versa.	https://www.gdargaud.net/Humor/QuotesProgramming.html
It is twice as difficult to debug a program as to write it. Therefore, if you put all of your creativity and effort into writing the program, you are not smart enough to debug it.	https://www.gdargaud.net/Humor/QuotesProgramming.html
We have a bug that occurs on the 31st of a month so once a month we get a bug report. It gets assigned to a developer within 24 hours who then fiddles for a bit before marking it 'unable to reproduce'.    — kosh.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I'm in the computer business, I make Out-Of-Order signs. 	https://www.gdargaud.net/Humor/QuotesProgramming.html
Kevorkian Virus: helps your computer shut down whenever it wants to.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Error, no keyboard — press F1 to continue.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Cannot delete tmp150---3.tmp: There is not enough free disk space. Delete one or more files to free disk space, and then try again.	https://www.gdargaud.net/Humor/QuotesProgramming.html
File not found. Should I fake it ? (Y/N)	https://www.gdargaud.net/Humor/QuotesProgramming.html
Beware of bugs in the above code; I have only proved it correct, not tried it.    — Buy at Amazon.comDonald E. Knuth.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The first manned space flight had a computer on board to control re-entry, but it was basic in the extreme, and locked so Comrade Gagarin couldn't tamper with it. An envelope with the code to unlock the computer was hidden somewhere in the capsule, and should an emergency arise, ground control would tell him where it was.	https://www.gdargaud.net/Humor/QuotesProgramming.html
When all else fails, read the instructions.    — L. Iasellio.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Computer system analysis is like child-rearing; you can do grievous damage, but you cannot ensure success.    — Buy at Amazon.comTom DeMarco.	https://www.gdargaud.net/Humor/QuotesProgramming.html
As currently implemented, the etime function fails across month and year boundaries. Since etime is an M-file, you can modify the code to work across these boundaries if needed.    — Found in the Buy at Amazon.comMatlab documentation. You mean to tell me I should pay several hundred $ for code that doesn't even work, but 'fortunately' I can modify it myself to make it work !?! Thanks but I'll stick to Octave.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The memory management on the PowerPC can be used to frighten small children.    — Buy at Amazon.comLinus Torvalds.	https://www.gdargaud.net/Humor/QuotesProgramming.html
When in doubt, use brute force.    — Ken Thompson.	https://www.gdargaud.net/Humor/QuotesProgramming.html
If brute force doesn't solve your problems, then you aren't using enough.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The definition of an upgrade: Take old bugs out, put new ones in.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Evolution is God's way of issuing upgrades.	https://www.gdargaud.net/Humor/QuotesProgramming.html
It should be noted that no ethically-trained software engineer would ever consent to write a DestroyBaghdad procedure. Basic professional ethics would instead require him to write a DestroyCity procedure, to which Baghdad could be given as a parameter.     — Nathaniel Borenstein.	https://www.gdargaud.net/Humor/QuotesProgramming.html
That's the thing about people who think they hate computers. What they really hate is lousy programmers.    — Larry Niven.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The only problem with troubleshooting is that sometimes trouble shoots back.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Each new user of a new system uncovers a new class of bugs.    — Buy at Amazon.comKernighan.	https://www.gdargaud.net/Humor/QuotesProgramming.html
If it's not on fire, it's a software problem.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.    — Martin Golding.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Never test for an error condition you don't know how to handle.    — Steinbach's Guideline for Systems Programmers.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Sometimes it pays to stay in bed on Monday, rather than spending the rest of the week debugging Monday's code.    — Christopher Thompson.	https://www.gdargaud.net/Humor/QuotesProgramming.html
My software never has bugs. It just develops random features.	https://www.gdargaud.net/Humor/QuotesProgramming.html
The only difference between a bug and a feature is the documentation.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Programming is like sex: one mistake and you're providing support for a lifetime.    — Michael Sinz.	https://www.gdargaud.net/Humor/QuotesProgramming.html
There are two ways to write error-free programs; only the third one works.    — Buy at Amazon.comAlan J. Perlis.	https://www.gdargaud.net/Humor/QuotesProgramming.html
There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies.    — C.A.R. Hoare.	https://www.gdargaud.net/Humor/QuotesProgramming.html
A one-question geek test. If you get the joke, you're a geek: Seen on a California license plate on a VW Beetle: 'FEATURE'...    — Joshua D. Wachs, Natural Intelligence Inc.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Q: How can you tell an extroverted computer geek from an introverted computer geek ? A: The introverted computer geek will look at his shoes while he talks to you. The extroverted computer geek will look at your shoes while he talks to you.	https://www.gdargaud.net/Humor/QuotesProgramming.html
Q: How do you tell if an extroverted computer geek is Russian ? A: His shoes look at you while he is talking.	https://www.gdargaud.net/Humor/QuotesProgramming.html
To work on a program with the compiler in debug mode and then to sell it compiling it without the debug option is like learning to swim with floaters and then taking them off to swim across the Atlantic.    — My C professor.	https://www.gdargaud.net/Humor/QuotesProgramming.html
I hope the Q-Tips in that 500 count box I bought last night are Year 2000 compliant, 'cause it'll take me at least three years to get through them all.    — Mark Mundy.	https://www.gdargaud.net/Humor/QuotesProgramming.html
It's a little-known fact that the Y1K problem caused the Dark Ages.	https://www.gdargaud.net/Humor/QuotesProgramming.html
As an ultimate incentive to solve the millennium bug computer problem, China has ordered its airline executives to take a flight on January 1, 2000.    — The Financial Times.	https://www.gdargaud.net/Humor/QuotesProgramming.html
It's 11:59 on December 31 1999. In two minutes time, are you gonna be glad you don't have a bank account ?	https://www.gdargaud.net/Humor/QuotesProgramming.html